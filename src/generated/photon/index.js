"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const runtime_1 = require("./runtime");
const path = require("path");
const debug = runtime_1.debugLib('photon');
class PhotonFetcher {
    constructor(photon, engine, debug = false, hooks) {
        this.photon = photon;
        this.engine = engine;
        this.debug = debug;
        this.hooks = hooks;
    }
    request(document, path = [], rootField, typeName, isList) {
        return __awaiter(this, void 0, void 0, function* () {
            const query = String(document);
            debug(query);
            if (this.hooks && this.hooks.beforeRequest) {
                this.hooks.beforeRequest({ query, path, rootField, typeName, document });
            }
            yield this.photon.connect();
            try {
                const result = yield this.engine.request(query, typeName);
                debug(result);
                return this.unpack(result, path, rootField, isList);
            }
            catch (e) {
                throw new Error(`Error in Photon${path}: \n` + e.message);
            }
        });
    }
    unpack(data, path, rootField, isList) {
        const getPath = [];
        if (rootField) {
            getPath.push(rootField);
        }
        getPath.push(...path.filter(p => p !== 'select' && p !== 'include'));
        const result = runtime_1.deepGet(data, getPath) || null;
        if (result === null && isList) {
            return [];
        }
        return result;
    }
}
/**
 * Build tool annotations
 * In order to make `ncc` and `node-file-trace` happy.
**/
path.join(__dirname, 'runtime/query-engine-darwin');
path.join(__dirname, 'runtime/query-engine-linux-glibc-libssl1.0.2');
function uniqueBy(arr, cb) {
    var a = arr.concat();
    for (var i = 0; i < a.length; ++i) {
        for (var j = i + 1; j < a.length; ++j) {
            if (cb(a[i]) === cb(a[j]))
                a.splice(j--, 1);
        }
    }
    return a;
}
class Photon {
    constructor(options = {}) {
        const useDebug = options.debug === true ? true : typeof options.debug === 'object' ? Boolean(options.debug.library) : false;
        if (useDebug) {
            runtime_1.debugLib.enable('photon');
        }
        const debugEngine = options.debug === true ? true : typeof options.debug === 'object' ? Boolean(options.debug.engine) : false;
        // datamodel = datamodel without datasources + printed datasources
        this.datamodel = "datasource db {\n  provider = env(\"PRISMA_PROVIDER\")\n  url      = env(\"PRISMA_URL\")\n}\n\ngenerator photon {\n  provider = \"photonjs\"\n  platforms = [\"native\", \"linux-glibc-libssl1.0.2\"]\n  output    = \"../src/generated/photon\"\n}\n\nmodel Form {\n  id        Int     @id @unique\n  uid       String  @unique\n  name      String\n  tag       String\n  questions Question[]\n  responses Response[]\n}\n\nmodel Question {\n  id        Int      @id @unique\n  uid       String   @unique\n  type      String\n  text      String\n  form      Form?\n  answers   Answer[]\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n\nmodel Answer {\n  id        Int      @id @unique\n  text      String\n  question  Question?\n  response  Response?\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n\nmodel Response {\n  id          Int      @id @unique\n  uid         String   @unique\n  submittedAt DateTime\n  user        User?\n  form        Form?\n  answers     Answer[]\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n}\n\nmodel User {\n  id        Int      @id @unique\n  email     String   @unique\n  responses Response[]\n  note      Note?\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n\nmodel Note {\n  id   Int @id @unique\n  text String\n  user User\n}\n";
        const predefinedDatasources = [];
        const inputDatasources = Object.entries(options.datasources || {}).map(([name, url]) => ({ name, url: url }));
        const datasources = uniqueBy([...predefinedDatasources, ...inputDatasources], source => source.name);
        const internal = options.__internal || {};
        const engineConfig = internal.engine || {};
        this.engine = new runtime_1.Engine({
            cwd: engineConfig.cwd,
            debug: debugEngine,
            datamodel: this.datamodel,
            prismaPath: engineConfig.binaryPath || undefined,
            datasources,
            generator: { "name": "photon", "provider": "photonjs", "output": "/Users/rob/Sites/pwv/typesponder/src/generated/photon", "platforms": ["native", "linux-glibc-libssl1.0.2"], "pinnedPlatform": null, "config": {} },
            platform: undefined
        });
        this.dmmf = new runtime_1.DMMFClass(exports.dmmf);
        this.fetcher = new PhotonFetcher(this, this.engine, false, internal.hooks);
    }
    connectEngine(publicCall) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.engine.start();
        });
    }
    connect() {
        if (this.connectionPromise) {
            return this.connectionPromise;
        }
        this.connectionPromise = this.connectEngine(true);
        return this.connectionPromise;
    }
    disconnect() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.engine.stop();
        });
    }
    // won't be generated for now
    // private _query?: QueryDelegate
    // get query(): QueryDelegate {
    //   return this._query ? this._query: (this._query = QueryDelegate(this.dmmf, this.fetcher))
    // }
    get forms() {
        return FormDelegate(this.dmmf, this.fetcher);
    }
    get questions() {
        return QuestionDelegate(this.dmmf, this.fetcher);
    }
    get answers() {
        return AnswerDelegate(this.dmmf, this.fetcher);
    }
    get responses() {
        return ResponseDelegate(this.dmmf, this.fetcher);
    }
    get users() {
        return UserDelegate(this.dmmf, this.fetcher);
    }
    get notes() {
        return NoteDelegate(this.dmmf, this.fetcher);
    }
}
exports.default = Photon;
/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }
exports.OrderByArg = makeEnum({
    asc: 'asc',
    desc: 'desc'
});
function FormDelegate(dmmf, fetcher) {
    const Form = (args) => new FormClient(dmmf, fetcher, 'query', 'findManyForm', 'forms', args, []);
    Form.findOne = (args) => args.select ? new FormClient(dmmf, fetcher, 'query', 'findOneForm', 'forms.findOne', args, []) : new FormClient(dmmf, fetcher, 'query', 'findOneForm', 'forms.findOne', args, []);
    Form.findMany = (args) => new FormClient(dmmf, fetcher, 'query', 'findManyForm', 'forms.findMany', args, []);
    Form.create = (args) => args.select ? new FormClient(dmmf, fetcher, 'mutation', 'createOneForm', 'forms.create', args, []) : new FormClient(dmmf, fetcher, 'mutation', 'createOneForm', 'forms.create', args, []);
    Form.delete = (args) => args.select ? new FormClient(dmmf, fetcher, 'mutation', 'deleteOneForm', 'forms.delete', args, []) : new FormClient(dmmf, fetcher, 'mutation', 'deleteOneForm', 'forms.delete', args, []);
    Form.update = (args) => args.select ? new FormClient(dmmf, fetcher, 'mutation', 'updateOneForm', 'forms.update', args, []) : new FormClient(dmmf, fetcher, 'mutation', 'updateOneForm', 'forms.update', args, []);
    Form.deleteMany = (args) => args.select ? new FormClient(dmmf, fetcher, 'mutation', 'deleteManyForm', 'forms.deleteMany', args, []) : new FormClient(dmmf, fetcher, 'mutation', 'deleteManyForm', 'forms.deleteMany', args, []);
    Form.updateMany = (args) => args.select ? new FormClient(dmmf, fetcher, 'mutation', 'updateManyForm', 'forms.updateMany', args, []) : new FormClient(dmmf, fetcher, 'mutation', 'updateManyForm', 'forms.updateMany', args, []);
    Form.upsert = (args) => args.select ? new FormClient(dmmf, fetcher, 'mutation', 'upsertOneForm', 'forms.upsert', args, []) : new FormClient(dmmf, fetcher, 'mutation', 'upsertOneForm', 'forms.upsert', args, []);
    return Form; // any needed until https://github.com/microsoft/TypeScript/issues/31335 is resolved
}
class FormClient {
    constructor(_dmmf, _fetcher, _queryType, _rootField, _clientMethod, _args, _path, _isList = false) {
        this._dmmf = _dmmf;
        this._fetcher = _fetcher;
        this._queryType = _queryType;
        this._rootField = _rootField;
        this._clientMethod = _clientMethod;
        this._args = _args;
        this._path = _path;
        this._isList = _isList;
        // @ts-ignore
        if (typeof window === 'undefined' && process.env.NODE_ENV !== 'production') {
            const error = new Error();
            if (error && error.stack) {
                const stack = error.stack;
                this._callsite = stack;
            }
        }
    }
    questions(args) {
        const prefix = this._path.includes('select') ? 'select' : this._path.includes('include') ? 'include' : 'select';
        const path = [...this._path, prefix, 'questions'];
        const newArgs = runtime_1.deepSet(this._args, path, args || true);
        this._isList = true;
        return new QuestionClient(this._dmmf, this._fetcher, this._queryType, this._rootField, this._clientMethod, newArgs, path, this._isList);
    }
    responses(args) {
        const prefix = this._path.includes('select') ? 'select' : this._path.includes('include') ? 'include' : 'select';
        const path = [...this._path, prefix, 'responses'];
        const newArgs = runtime_1.deepSet(this._args, path, args || true);
        this._isList = true;
        return new ResponseClient(this._dmmf, this._fetcher, this._queryType, this._rootField, this._clientMethod, newArgs, path, this._isList);
    }
    get _document() {
        const { _rootField: rootField } = this;
        const document = runtime_1.makeDocument({
            dmmf: this._dmmf,
            rootField,
            rootTypeName: this._queryType,
            select: this._args
        });
        try {
            document.validate(this._args, false, this._clientMethod);
        }
        catch (e) {
            const x = e;
            if (x.render) {
                if (this._callsite) {
                    e.message = x.render(this._callsite);
                }
            }
            throw e;
        }
        debug(String(document));
        return runtime_1.transformDocument(document);
    }
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then(onfulfilled, onrejected) {
        if (!this._requestPromise) {
            this._requestPromise = this._fetcher.request(this._document, this._path, this._rootField, 'Form', this._isList);
        }
        return this._requestPromise.then(onfulfilled, onrejected);
    }
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch(onrejected) {
        if (!this._requestPromise) {
            this._requestPromise = this._fetcher.request(this._document, this._path, this._rootField, 'Form', this._isList);
        }
        return this._requestPromise.catch(onrejected);
    }
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally) {
        if (!this._requestPromise) {
            this._requestPromise = this._fetcher.request(this._document, this._path, this._rootField, 'Form', this._isList);
        }
        return this._requestPromise.finally(onfinally);
    }
}
exports.FormClient = FormClient;
function QuestionDelegate(dmmf, fetcher) {
    const Question = (args) => new QuestionClient(dmmf, fetcher, 'query', 'findManyQuestion', 'questions', args, []);
    Question.findOne = (args) => args.select ? new QuestionClient(dmmf, fetcher, 'query', 'findOneQuestion', 'questions.findOne', args, []) : new QuestionClient(dmmf, fetcher, 'query', 'findOneQuestion', 'questions.findOne', args, []);
    Question.findMany = (args) => new QuestionClient(dmmf, fetcher, 'query', 'findManyQuestion', 'questions.findMany', args, []);
    Question.create = (args) => args.select ? new QuestionClient(dmmf, fetcher, 'mutation', 'createOneQuestion', 'questions.create', args, []) : new QuestionClient(dmmf, fetcher, 'mutation', 'createOneQuestion', 'questions.create', args, []);
    Question.delete = (args) => args.select ? new QuestionClient(dmmf, fetcher, 'mutation', 'deleteOneQuestion', 'questions.delete', args, []) : new QuestionClient(dmmf, fetcher, 'mutation', 'deleteOneQuestion', 'questions.delete', args, []);
    Question.update = (args) => args.select ? new QuestionClient(dmmf, fetcher, 'mutation', 'updateOneQuestion', 'questions.update', args, []) : new QuestionClient(dmmf, fetcher, 'mutation', 'updateOneQuestion', 'questions.update', args, []);
    Question.deleteMany = (args) => args.select ? new QuestionClient(dmmf, fetcher, 'mutation', 'deleteManyQuestion', 'questions.deleteMany', args, []) : new QuestionClient(dmmf, fetcher, 'mutation', 'deleteManyQuestion', 'questions.deleteMany', args, []);
    Question.updateMany = (args) => args.select ? new QuestionClient(dmmf, fetcher, 'mutation', 'updateManyQuestion', 'questions.updateMany', args, []) : new QuestionClient(dmmf, fetcher, 'mutation', 'updateManyQuestion', 'questions.updateMany', args, []);
    Question.upsert = (args) => args.select ? new QuestionClient(dmmf, fetcher, 'mutation', 'upsertOneQuestion', 'questions.upsert', args, []) : new QuestionClient(dmmf, fetcher, 'mutation', 'upsertOneQuestion', 'questions.upsert', args, []);
    return Question; // any needed until https://github.com/microsoft/TypeScript/issues/31335 is resolved
}
class QuestionClient {
    constructor(_dmmf, _fetcher, _queryType, _rootField, _clientMethod, _args, _path, _isList = false) {
        this._dmmf = _dmmf;
        this._fetcher = _fetcher;
        this._queryType = _queryType;
        this._rootField = _rootField;
        this._clientMethod = _clientMethod;
        this._args = _args;
        this._path = _path;
        this._isList = _isList;
        // @ts-ignore
        if (typeof window === 'undefined' && process.env.NODE_ENV !== 'production') {
            const error = new Error();
            if (error && error.stack) {
                const stack = error.stack;
                this._callsite = stack;
            }
        }
    }
    form(args) {
        const prefix = this._path.includes('select') ? 'select' : this._path.includes('include') ? 'include' : 'select';
        const path = [...this._path, prefix, 'form'];
        const newArgs = runtime_1.deepSet(this._args, path, args || true);
        this._isList = false;
        return new FormClient(this._dmmf, this._fetcher, this._queryType, this._rootField, this._clientMethod, newArgs, path, this._isList);
    }
    answers(args) {
        const prefix = this._path.includes('select') ? 'select' : this._path.includes('include') ? 'include' : 'select';
        const path = [...this._path, prefix, 'answers'];
        const newArgs = runtime_1.deepSet(this._args, path, args || true);
        this._isList = true;
        return new AnswerClient(this._dmmf, this._fetcher, this._queryType, this._rootField, this._clientMethod, newArgs, path, this._isList);
    }
    get _document() {
        const { _rootField: rootField } = this;
        const document = runtime_1.makeDocument({
            dmmf: this._dmmf,
            rootField,
            rootTypeName: this._queryType,
            select: this._args
        });
        try {
            document.validate(this._args, false, this._clientMethod);
        }
        catch (e) {
            const x = e;
            if (x.render) {
                if (this._callsite) {
                    e.message = x.render(this._callsite);
                }
            }
            throw e;
        }
        debug(String(document));
        return runtime_1.transformDocument(document);
    }
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then(onfulfilled, onrejected) {
        if (!this._requestPromise) {
            this._requestPromise = this._fetcher.request(this._document, this._path, this._rootField, 'Question', this._isList);
        }
        return this._requestPromise.then(onfulfilled, onrejected);
    }
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch(onrejected) {
        if (!this._requestPromise) {
            this._requestPromise = this._fetcher.request(this._document, this._path, this._rootField, 'Question', this._isList);
        }
        return this._requestPromise.catch(onrejected);
    }
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally) {
        if (!this._requestPromise) {
            this._requestPromise = this._fetcher.request(this._document, this._path, this._rootField, 'Question', this._isList);
        }
        return this._requestPromise.finally(onfinally);
    }
}
exports.QuestionClient = QuestionClient;
function AnswerDelegate(dmmf, fetcher) {
    const Answer = (args) => new AnswerClient(dmmf, fetcher, 'query', 'findManyAnswer', 'answers', args, []);
    Answer.findOne = (args) => args.select ? new AnswerClient(dmmf, fetcher, 'query', 'findOneAnswer', 'answers.findOne', args, []) : new AnswerClient(dmmf, fetcher, 'query', 'findOneAnswer', 'answers.findOne', args, []);
    Answer.findMany = (args) => new AnswerClient(dmmf, fetcher, 'query', 'findManyAnswer', 'answers.findMany', args, []);
    Answer.create = (args) => args.select ? new AnswerClient(dmmf, fetcher, 'mutation', 'createOneAnswer', 'answers.create', args, []) : new AnswerClient(dmmf, fetcher, 'mutation', 'createOneAnswer', 'answers.create', args, []);
    Answer.delete = (args) => args.select ? new AnswerClient(dmmf, fetcher, 'mutation', 'deleteOneAnswer', 'answers.delete', args, []) : new AnswerClient(dmmf, fetcher, 'mutation', 'deleteOneAnswer', 'answers.delete', args, []);
    Answer.update = (args) => args.select ? new AnswerClient(dmmf, fetcher, 'mutation', 'updateOneAnswer', 'answers.update', args, []) : new AnswerClient(dmmf, fetcher, 'mutation', 'updateOneAnswer', 'answers.update', args, []);
    Answer.deleteMany = (args) => args.select ? new AnswerClient(dmmf, fetcher, 'mutation', 'deleteManyAnswer', 'answers.deleteMany', args, []) : new AnswerClient(dmmf, fetcher, 'mutation', 'deleteManyAnswer', 'answers.deleteMany', args, []);
    Answer.updateMany = (args) => args.select ? new AnswerClient(dmmf, fetcher, 'mutation', 'updateManyAnswer', 'answers.updateMany', args, []) : new AnswerClient(dmmf, fetcher, 'mutation', 'updateManyAnswer', 'answers.updateMany', args, []);
    Answer.upsert = (args) => args.select ? new AnswerClient(dmmf, fetcher, 'mutation', 'upsertOneAnswer', 'answers.upsert', args, []) : new AnswerClient(dmmf, fetcher, 'mutation', 'upsertOneAnswer', 'answers.upsert', args, []);
    return Answer; // any needed until https://github.com/microsoft/TypeScript/issues/31335 is resolved
}
class AnswerClient {
    constructor(_dmmf, _fetcher, _queryType, _rootField, _clientMethod, _args, _path, _isList = false) {
        this._dmmf = _dmmf;
        this._fetcher = _fetcher;
        this._queryType = _queryType;
        this._rootField = _rootField;
        this._clientMethod = _clientMethod;
        this._args = _args;
        this._path = _path;
        this._isList = _isList;
        // @ts-ignore
        if (typeof window === 'undefined' && process.env.NODE_ENV !== 'production') {
            const error = new Error();
            if (error && error.stack) {
                const stack = error.stack;
                this._callsite = stack;
            }
        }
    }
    question(args) {
        const prefix = this._path.includes('select') ? 'select' : this._path.includes('include') ? 'include' : 'select';
        const path = [...this._path, prefix, 'question'];
        const newArgs = runtime_1.deepSet(this._args, path, args || true);
        this._isList = false;
        return new QuestionClient(this._dmmf, this._fetcher, this._queryType, this._rootField, this._clientMethod, newArgs, path, this._isList);
    }
    response(args) {
        const prefix = this._path.includes('select') ? 'select' : this._path.includes('include') ? 'include' : 'select';
        const path = [...this._path, prefix, 'response'];
        const newArgs = runtime_1.deepSet(this._args, path, args || true);
        this._isList = false;
        return new ResponseClient(this._dmmf, this._fetcher, this._queryType, this._rootField, this._clientMethod, newArgs, path, this._isList);
    }
    get _document() {
        const { _rootField: rootField } = this;
        const document = runtime_1.makeDocument({
            dmmf: this._dmmf,
            rootField,
            rootTypeName: this._queryType,
            select: this._args
        });
        try {
            document.validate(this._args, false, this._clientMethod);
        }
        catch (e) {
            const x = e;
            if (x.render) {
                if (this._callsite) {
                    e.message = x.render(this._callsite);
                }
            }
            throw e;
        }
        debug(String(document));
        return runtime_1.transformDocument(document);
    }
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then(onfulfilled, onrejected) {
        if (!this._requestPromise) {
            this._requestPromise = this._fetcher.request(this._document, this._path, this._rootField, 'Answer', this._isList);
        }
        return this._requestPromise.then(onfulfilled, onrejected);
    }
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch(onrejected) {
        if (!this._requestPromise) {
            this._requestPromise = this._fetcher.request(this._document, this._path, this._rootField, 'Answer', this._isList);
        }
        return this._requestPromise.catch(onrejected);
    }
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally) {
        if (!this._requestPromise) {
            this._requestPromise = this._fetcher.request(this._document, this._path, this._rootField, 'Answer', this._isList);
        }
        return this._requestPromise.finally(onfinally);
    }
}
exports.AnswerClient = AnswerClient;
function ResponseDelegate(dmmf, fetcher) {
    const Response = (args) => new ResponseClient(dmmf, fetcher, 'query', 'findManyResponse', 'responses', args, []);
    Response.findOne = (args) => args.select ? new ResponseClient(dmmf, fetcher, 'query', 'findOneResponse', 'responses.findOne', args, []) : new ResponseClient(dmmf, fetcher, 'query', 'findOneResponse', 'responses.findOne', args, []);
    Response.findMany = (args) => new ResponseClient(dmmf, fetcher, 'query', 'findManyResponse', 'responses.findMany', args, []);
    Response.create = (args) => args.select ? new ResponseClient(dmmf, fetcher, 'mutation', 'createOneResponse', 'responses.create', args, []) : new ResponseClient(dmmf, fetcher, 'mutation', 'createOneResponse', 'responses.create', args, []);
    Response.delete = (args) => args.select ? new ResponseClient(dmmf, fetcher, 'mutation', 'deleteOneResponse', 'responses.delete', args, []) : new ResponseClient(dmmf, fetcher, 'mutation', 'deleteOneResponse', 'responses.delete', args, []);
    Response.update = (args) => args.select ? new ResponseClient(dmmf, fetcher, 'mutation', 'updateOneResponse', 'responses.update', args, []) : new ResponseClient(dmmf, fetcher, 'mutation', 'updateOneResponse', 'responses.update', args, []);
    Response.deleteMany = (args) => args.select ? new ResponseClient(dmmf, fetcher, 'mutation', 'deleteManyResponse', 'responses.deleteMany', args, []) : new ResponseClient(dmmf, fetcher, 'mutation', 'deleteManyResponse', 'responses.deleteMany', args, []);
    Response.updateMany = (args) => args.select ? new ResponseClient(dmmf, fetcher, 'mutation', 'updateManyResponse', 'responses.updateMany', args, []) : new ResponseClient(dmmf, fetcher, 'mutation', 'updateManyResponse', 'responses.updateMany', args, []);
    Response.upsert = (args) => args.select ? new ResponseClient(dmmf, fetcher, 'mutation', 'upsertOneResponse', 'responses.upsert', args, []) : new ResponseClient(dmmf, fetcher, 'mutation', 'upsertOneResponse', 'responses.upsert', args, []);
    return Response; // any needed until https://github.com/microsoft/TypeScript/issues/31335 is resolved
}
class ResponseClient {
    constructor(_dmmf, _fetcher, _queryType, _rootField, _clientMethod, _args, _path, _isList = false) {
        this._dmmf = _dmmf;
        this._fetcher = _fetcher;
        this._queryType = _queryType;
        this._rootField = _rootField;
        this._clientMethod = _clientMethod;
        this._args = _args;
        this._path = _path;
        this._isList = _isList;
        // @ts-ignore
        if (typeof window === 'undefined' && process.env.NODE_ENV !== 'production') {
            const error = new Error();
            if (error && error.stack) {
                const stack = error.stack;
                this._callsite = stack;
            }
        }
    }
    user(args) {
        const prefix = this._path.includes('select') ? 'select' : this._path.includes('include') ? 'include' : 'select';
        const path = [...this._path, prefix, 'user'];
        const newArgs = runtime_1.deepSet(this._args, path, args || true);
        this._isList = false;
        return new UserClient(this._dmmf, this._fetcher, this._queryType, this._rootField, this._clientMethod, newArgs, path, this._isList);
    }
    form(args) {
        const prefix = this._path.includes('select') ? 'select' : this._path.includes('include') ? 'include' : 'select';
        const path = [...this._path, prefix, 'form'];
        const newArgs = runtime_1.deepSet(this._args, path, args || true);
        this._isList = false;
        return new FormClient(this._dmmf, this._fetcher, this._queryType, this._rootField, this._clientMethod, newArgs, path, this._isList);
    }
    answers(args) {
        const prefix = this._path.includes('select') ? 'select' : this._path.includes('include') ? 'include' : 'select';
        const path = [...this._path, prefix, 'answers'];
        const newArgs = runtime_1.deepSet(this._args, path, args || true);
        this._isList = true;
        return new AnswerClient(this._dmmf, this._fetcher, this._queryType, this._rootField, this._clientMethod, newArgs, path, this._isList);
    }
    get _document() {
        const { _rootField: rootField } = this;
        const document = runtime_1.makeDocument({
            dmmf: this._dmmf,
            rootField,
            rootTypeName: this._queryType,
            select: this._args
        });
        try {
            document.validate(this._args, false, this._clientMethod);
        }
        catch (e) {
            const x = e;
            if (x.render) {
                if (this._callsite) {
                    e.message = x.render(this._callsite);
                }
            }
            throw e;
        }
        debug(String(document));
        return runtime_1.transformDocument(document);
    }
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then(onfulfilled, onrejected) {
        if (!this._requestPromise) {
            this._requestPromise = this._fetcher.request(this._document, this._path, this._rootField, 'Response', this._isList);
        }
        return this._requestPromise.then(onfulfilled, onrejected);
    }
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch(onrejected) {
        if (!this._requestPromise) {
            this._requestPromise = this._fetcher.request(this._document, this._path, this._rootField, 'Response', this._isList);
        }
        return this._requestPromise.catch(onrejected);
    }
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally) {
        if (!this._requestPromise) {
            this._requestPromise = this._fetcher.request(this._document, this._path, this._rootField, 'Response', this._isList);
        }
        return this._requestPromise.finally(onfinally);
    }
}
exports.ResponseClient = ResponseClient;
function UserDelegate(dmmf, fetcher) {
    const User = (args) => new UserClient(dmmf, fetcher, 'query', 'findManyUser', 'users', args, []);
    User.findOne = (args) => args.select ? new UserClient(dmmf, fetcher, 'query', 'findOneUser', 'users.findOne', args, []) : new UserClient(dmmf, fetcher, 'query', 'findOneUser', 'users.findOne', args, []);
    User.findMany = (args) => new UserClient(dmmf, fetcher, 'query', 'findManyUser', 'users.findMany', args, []);
    User.create = (args) => args.select ? new UserClient(dmmf, fetcher, 'mutation', 'createOneUser', 'users.create', args, []) : new UserClient(dmmf, fetcher, 'mutation', 'createOneUser', 'users.create', args, []);
    User.delete = (args) => args.select ? new UserClient(dmmf, fetcher, 'mutation', 'deleteOneUser', 'users.delete', args, []) : new UserClient(dmmf, fetcher, 'mutation', 'deleteOneUser', 'users.delete', args, []);
    User.update = (args) => args.select ? new UserClient(dmmf, fetcher, 'mutation', 'updateOneUser', 'users.update', args, []) : new UserClient(dmmf, fetcher, 'mutation', 'updateOneUser', 'users.update', args, []);
    User.deleteMany = (args) => args.select ? new UserClient(dmmf, fetcher, 'mutation', 'deleteManyUser', 'users.deleteMany', args, []) : new UserClient(dmmf, fetcher, 'mutation', 'deleteManyUser', 'users.deleteMany', args, []);
    User.updateMany = (args) => args.select ? new UserClient(dmmf, fetcher, 'mutation', 'updateManyUser', 'users.updateMany', args, []) : new UserClient(dmmf, fetcher, 'mutation', 'updateManyUser', 'users.updateMany', args, []);
    User.upsert = (args) => args.select ? new UserClient(dmmf, fetcher, 'mutation', 'upsertOneUser', 'users.upsert', args, []) : new UserClient(dmmf, fetcher, 'mutation', 'upsertOneUser', 'users.upsert', args, []);
    return User; // any needed until https://github.com/microsoft/TypeScript/issues/31335 is resolved
}
class UserClient {
    constructor(_dmmf, _fetcher, _queryType, _rootField, _clientMethod, _args, _path, _isList = false) {
        this._dmmf = _dmmf;
        this._fetcher = _fetcher;
        this._queryType = _queryType;
        this._rootField = _rootField;
        this._clientMethod = _clientMethod;
        this._args = _args;
        this._path = _path;
        this._isList = _isList;
        // @ts-ignore
        if (typeof window === 'undefined' && process.env.NODE_ENV !== 'production') {
            const error = new Error();
            if (error && error.stack) {
                const stack = error.stack;
                this._callsite = stack;
            }
        }
    }
    responses(args) {
        const prefix = this._path.includes('select') ? 'select' : this._path.includes('include') ? 'include' : 'select';
        const path = [...this._path, prefix, 'responses'];
        const newArgs = runtime_1.deepSet(this._args, path, args || true);
        this._isList = true;
        return new ResponseClient(this._dmmf, this._fetcher, this._queryType, this._rootField, this._clientMethod, newArgs, path, this._isList);
    }
    note(args) {
        const prefix = this._path.includes('select') ? 'select' : this._path.includes('include') ? 'include' : 'select';
        const path = [...this._path, prefix, 'note'];
        const newArgs = runtime_1.deepSet(this._args, path, args || true);
        this._isList = false;
        return new NoteClient(this._dmmf, this._fetcher, this._queryType, this._rootField, this._clientMethod, newArgs, path, this._isList);
    }
    get _document() {
        const { _rootField: rootField } = this;
        const document = runtime_1.makeDocument({
            dmmf: this._dmmf,
            rootField,
            rootTypeName: this._queryType,
            select: this._args
        });
        try {
            document.validate(this._args, false, this._clientMethod);
        }
        catch (e) {
            const x = e;
            if (x.render) {
                if (this._callsite) {
                    e.message = x.render(this._callsite);
                }
            }
            throw e;
        }
        debug(String(document));
        return runtime_1.transformDocument(document);
    }
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then(onfulfilled, onrejected) {
        if (!this._requestPromise) {
            this._requestPromise = this._fetcher.request(this._document, this._path, this._rootField, 'User', this._isList);
        }
        return this._requestPromise.then(onfulfilled, onrejected);
    }
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch(onrejected) {
        if (!this._requestPromise) {
            this._requestPromise = this._fetcher.request(this._document, this._path, this._rootField, 'User', this._isList);
        }
        return this._requestPromise.catch(onrejected);
    }
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally) {
        if (!this._requestPromise) {
            this._requestPromise = this._fetcher.request(this._document, this._path, this._rootField, 'User', this._isList);
        }
        return this._requestPromise.finally(onfinally);
    }
}
exports.UserClient = UserClient;
function NoteDelegate(dmmf, fetcher) {
    const Note = (args) => new NoteClient(dmmf, fetcher, 'query', 'findManyNote', 'notes', args, []);
    Note.findOne = (args) => args.select ? new NoteClient(dmmf, fetcher, 'query', 'findOneNote', 'notes.findOne', args, []) : new NoteClient(dmmf, fetcher, 'query', 'findOneNote', 'notes.findOne', args, []);
    Note.findMany = (args) => new NoteClient(dmmf, fetcher, 'query', 'findManyNote', 'notes.findMany', args, []);
    Note.create = (args) => args.select ? new NoteClient(dmmf, fetcher, 'mutation', 'createOneNote', 'notes.create', args, []) : new NoteClient(dmmf, fetcher, 'mutation', 'createOneNote', 'notes.create', args, []);
    Note.delete = (args) => args.select ? new NoteClient(dmmf, fetcher, 'mutation', 'deleteOneNote', 'notes.delete', args, []) : new NoteClient(dmmf, fetcher, 'mutation', 'deleteOneNote', 'notes.delete', args, []);
    Note.update = (args) => args.select ? new NoteClient(dmmf, fetcher, 'mutation', 'updateOneNote', 'notes.update', args, []) : new NoteClient(dmmf, fetcher, 'mutation', 'updateOneNote', 'notes.update', args, []);
    Note.deleteMany = (args) => args.select ? new NoteClient(dmmf, fetcher, 'mutation', 'deleteManyNote', 'notes.deleteMany', args, []) : new NoteClient(dmmf, fetcher, 'mutation', 'deleteManyNote', 'notes.deleteMany', args, []);
    Note.updateMany = (args) => args.select ? new NoteClient(dmmf, fetcher, 'mutation', 'updateManyNote', 'notes.updateMany', args, []) : new NoteClient(dmmf, fetcher, 'mutation', 'updateManyNote', 'notes.updateMany', args, []);
    Note.upsert = (args) => args.select ? new NoteClient(dmmf, fetcher, 'mutation', 'upsertOneNote', 'notes.upsert', args, []) : new NoteClient(dmmf, fetcher, 'mutation', 'upsertOneNote', 'notes.upsert', args, []);
    return Note; // any needed until https://github.com/microsoft/TypeScript/issues/31335 is resolved
}
class NoteClient {
    constructor(_dmmf, _fetcher, _queryType, _rootField, _clientMethod, _args, _path, _isList = false) {
        this._dmmf = _dmmf;
        this._fetcher = _fetcher;
        this._queryType = _queryType;
        this._rootField = _rootField;
        this._clientMethod = _clientMethod;
        this._args = _args;
        this._path = _path;
        this._isList = _isList;
        // @ts-ignore
        if (typeof window === 'undefined' && process.env.NODE_ENV !== 'production') {
            const error = new Error();
            if (error && error.stack) {
                const stack = error.stack;
                this._callsite = stack;
            }
        }
    }
    user(args) {
        const prefix = this._path.includes('select') ? 'select' : this._path.includes('include') ? 'include' : 'select';
        const path = [...this._path, prefix, 'user'];
        const newArgs = runtime_1.deepSet(this._args, path, args || true);
        this._isList = false;
        return new UserClient(this._dmmf, this._fetcher, this._queryType, this._rootField, this._clientMethod, newArgs, path, this._isList);
    }
    get _document() {
        const { _rootField: rootField } = this;
        const document = runtime_1.makeDocument({
            dmmf: this._dmmf,
            rootField,
            rootTypeName: this._queryType,
            select: this._args
        });
        try {
            document.validate(this._args, false, this._clientMethod);
        }
        catch (e) {
            const x = e;
            if (x.render) {
                if (this._callsite) {
                    e.message = x.render(this._callsite);
                }
            }
            throw e;
        }
        debug(String(document));
        return runtime_1.transformDocument(document);
    }
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then(onfulfilled, onrejected) {
        if (!this._requestPromise) {
            this._requestPromise = this._fetcher.request(this._document, this._path, this._rootField, 'Note', this._isList);
        }
        return this._requestPromise.then(onfulfilled, onrejected);
    }
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch(onrejected) {
        if (!this._requestPromise) {
            this._requestPromise = this._fetcher.request(this._document, this._path, this._rootField, 'Note', this._isList);
        }
        return this._requestPromise.catch(onrejected);
    }
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally) {
        if (!this._requestPromise) {
            this._requestPromise = this._fetcher.request(this._document, this._path, this._rootField, 'Note', this._isList);
        }
        return this._requestPromise.finally(onfinally);
    }
}
exports.NoteClient = NoteClient;
/**
 * DMMF
 */
exports.dmmf = { "datamodel": { "enums": [], "models": [{ "name": "Form", "isEmbedded": false, "dbName": null, "fields": [{ "name": "id", "kind": "scalar", "dbName": null, "isList": false, "isRequired": true, "isUnique": true, "isId": true, "type": "Int", "isGenerated": false, "isUpdatedAt": false }, { "name": "uid", "kind": "scalar", "dbName": null, "isList": false, "isRequired": true, "isUnique": true, "isId": false, "type": "String", "isGenerated": false, "isUpdatedAt": false }, { "name": "name", "kind": "scalar", "dbName": null, "isList": false, "isRequired": true, "isUnique": false, "isId": false, "type": "String", "isGenerated": false, "isUpdatedAt": false }, { "name": "tag", "kind": "scalar", "dbName": null, "isList": false, "isRequired": true, "isUnique": false, "isId": false, "type": "String", "isGenerated": false, "isUpdatedAt": false }, { "name": "questions", "kind": "object", "dbName": null, "isList": true, "isRequired": false, "isUnique": false, "isId": false, "type": "Question", "relationName": "FormToQuestion", "relationToFields": [], "relationOnDelete": "NONE", "isGenerated": false, "isUpdatedAt": false }, { "name": "responses", "kind": "object", "dbName": null, "isList": true, "isRequired": false, "isUnique": false, "isId": false, "type": "Response", "relationName": "FormToResponse", "relationToFields": [], "relationOnDelete": "NONE", "isGenerated": false, "isUpdatedAt": false }], "isGenerated": false }, { "name": "Question", "isEmbedded": false, "dbName": null, "fields": [{ "name": "id", "kind": "scalar", "dbName": null, "isList": false, "isRequired": true, "isUnique": true, "isId": true, "type": "Int", "isGenerated": false, "isUpdatedAt": false }, { "name": "uid", "kind": "scalar", "dbName": null, "isList": false, "isRequired": true, "isUnique": true, "isId": false, "type": "String", "isGenerated": false, "isUpdatedAt": false }, { "name": "type", "kind": "scalar", "dbName": null, "isList": false, "isRequired": true, "isUnique": false, "isId": false, "type": "String", "isGenerated": false, "isUpdatedAt": false }, { "name": "text", "kind": "scalar", "dbName": null, "isList": false, "isRequired": true, "isUnique": false, "isId": false, "type": "String", "isGenerated": false, "isUpdatedAt": false }, { "name": "form", "kind": "object", "dbName": null, "isList": false, "isRequired": false, "isUnique": false, "isId": false, "type": "Form", "relationName": "FormToQuestion", "relationToFields": ["id"], "relationOnDelete": "NONE", "isGenerated": false, "isUpdatedAt": false }, { "name": "answers", "kind": "object", "dbName": null, "isList": true, "isRequired": false, "isUnique": false, "isId": false, "type": "Answer", "relationName": "AnswerToQuestion", "relationToFields": [], "relationOnDelete": "NONE", "isGenerated": false, "isUpdatedAt": false }, { "name": "createdAt", "kind": "scalar", "dbName": null, "isList": false, "isRequired": true, "isUnique": false, "isId": false, "type": "DateTime", "default": { "name": "now", "returnType": "DateTime", "args": [] }, "isGenerated": false, "isUpdatedAt": false }, { "name": "updatedAt", "kind": "scalar", "dbName": null, "isList": false, "isRequired": true, "isUnique": false, "isId": false, "type": "DateTime", "isGenerated": false, "isUpdatedAt": true }], "isGenerated": false }, { "name": "Answer", "isEmbedded": false, "dbName": null, "fields": [{ "name": "id", "kind": "scalar", "dbName": null, "isList": false, "isRequired": true, "isUnique": true, "isId": true, "type": "Int", "isGenerated": false, "isUpdatedAt": false }, { "name": "text", "kind": "scalar", "dbName": null, "isList": false, "isRequired": true, "isUnique": false, "isId": false, "type": "String", "isGenerated": false, "isUpdatedAt": false }, { "name": "question", "kind": "object", "dbName": null, "isList": false, "isRequired": false, "isUnique": false, "isId": false, "type": "Question", "relationName": "AnswerToQuestion", "relationToFields": ["id"], "relationOnDelete": "NONE", "isGenerated": false, "isUpdatedAt": false }, { "name": "response", "kind": "object", "dbName": null, "isList": false, "isRequired": false, "isUnique": false, "isId": false, "type": "Response", "relationName": "AnswerToResponse", "relationToFields": ["id"], "relationOnDelete": "NONE", "isGenerated": false, "isUpdatedAt": false }, { "name": "createdAt", "kind": "scalar", "dbName": null, "isList": false, "isRequired": true, "isUnique": false, "isId": false, "type": "DateTime", "default": { "name": "now", "returnType": "DateTime", "args": [] }, "isGenerated": false, "isUpdatedAt": false }, { "name": "updatedAt", "kind": "scalar", "dbName": null, "isList": false, "isRequired": true, "isUnique": false, "isId": false, "type": "DateTime", "isGenerated": false, "isUpdatedAt": true }], "isGenerated": false }, { "name": "Response", "isEmbedded": false, "dbName": null, "fields": [{ "name": "id", "kind": "scalar", "dbName": null, "isList": false, "isRequired": true, "isUnique": true, "isId": true, "type": "Int", "isGenerated": false, "isUpdatedAt": false }, { "name": "uid", "kind": "scalar", "dbName": null, "isList": false, "isRequired": true, "isUnique": true, "isId": false, "type": "String", "isGenerated": false, "isUpdatedAt": false }, { "name": "submittedAt", "kind": "scalar", "dbName": null, "isList": false, "isRequired": true, "isUnique": false, "isId": false, "type": "DateTime", "isGenerated": false, "isUpdatedAt": false }, { "name": "user", "kind": "object", "dbName": null, "isList": false, "isRequired": false, "isUnique": false, "isId": false, "type": "User", "relationName": "ResponseToUser", "relationToFields": ["id"], "relationOnDelete": "NONE", "isGenerated": false, "isUpdatedAt": false }, { "name": "form", "kind": "object", "dbName": null, "isList": false, "isRequired": false, "isUnique": false, "isId": false, "type": "Form", "relationName": "FormToResponse", "relationToFields": ["id"], "relationOnDelete": "NONE", "isGenerated": false, "isUpdatedAt": false }, { "name": "answers", "kind": "object", "dbName": null, "isList": true, "isRequired": false, "isUnique": false, "isId": false, "type": "Answer", "relationName": "AnswerToResponse", "relationToFields": [], "relationOnDelete": "NONE", "isGenerated": false, "isUpdatedAt": false }, { "name": "createdAt", "kind": "scalar", "dbName": null, "isList": false, "isRequired": true, "isUnique": false, "isId": false, "type": "DateTime", "default": { "name": "now", "returnType": "DateTime", "args": [] }, "isGenerated": false, "isUpdatedAt": false }, { "name": "updatedAt", "kind": "scalar", "dbName": null, "isList": false, "isRequired": true, "isUnique": false, "isId": false, "type": "DateTime", "isGenerated": false, "isUpdatedAt": true }], "isGenerated": false }, { "name": "User", "isEmbedded": false, "dbName": null, "fields": [{ "name": "id", "kind": "scalar", "dbName": null, "isList": false, "isRequired": true, "isUnique": true, "isId": true, "type": "Int", "isGenerated": false, "isUpdatedAt": false }, { "name": "email", "kind": "scalar", "dbName": null, "isList": false, "isRequired": true, "isUnique": true, "isId": false, "type": "String", "isGenerated": false, "isUpdatedAt": false }, { "name": "responses", "kind": "object", "dbName": null, "isList": true, "isRequired": false, "isUnique": false, "isId": false, "type": "Response", "relationName": "ResponseToUser", "relationToFields": [], "relationOnDelete": "NONE", "isGenerated": false, "isUpdatedAt": false }, { "name": "note", "kind": "object", "dbName": null, "isList": false, "isRequired": false, "isUnique": false, "isId": false, "type": "Note", "relationName": "NoteToUser", "relationToFields": [], "relationOnDelete": "NONE", "isGenerated": false, "isUpdatedAt": false }, { "name": "createdAt", "kind": "scalar", "dbName": null, "isList": false, "isRequired": true, "isUnique": false, "isId": false, "type": "DateTime", "default": { "name": "now", "returnType": "DateTime", "args": [] }, "isGenerated": false, "isUpdatedAt": false }, { "name": "updatedAt", "kind": "scalar", "dbName": null, "isList": false, "isRequired": true, "isUnique": false, "isId": false, "type": "DateTime", "isGenerated": false, "isUpdatedAt": true }], "isGenerated": false }, { "name": "Note", "isEmbedded": false, "dbName": null, "fields": [{ "name": "id", "kind": "scalar", "dbName": null, "isList": false, "isRequired": true, "isUnique": true, "isId": true, "type": "Int", "isGenerated": false, "isUpdatedAt": false }, { "name": "text", "kind": "scalar", "dbName": null, "isList": false, "isRequired": true, "isUnique": false, "isId": false, "type": "String", "isGenerated": false, "isUpdatedAt": false }, { "name": "user", "kind": "object", "dbName": null, "isList": false, "isRequired": true, "isUnique": false, "isId": false, "type": "User", "relationName": "NoteToUser", "relationToFields": ["id"], "relationOnDelete": "NONE", "isGenerated": false, "isUpdatedAt": false }], "isGenerated": false }] }, "mappings": [{ "model": "Form", "plural": "forms", "findOne": "findOneForm", "findMany": "findManyForm", "create": "createOneForm", "delete": "deleteOneForm", "update": "updateOneForm", "deleteMany": "deleteManyForm", "updateMany": "updateManyForm", "upsert": "upsertOneForm" }, { "model": "Question", "plural": "questions", "findOne": "findOneQuestion", "findMany": "findManyQuestion", "create": "createOneQuestion", "delete": "deleteOneQuestion", "update": "updateOneQuestion", "deleteMany": "deleteManyQuestion", "updateMany": "updateManyQuestion", "upsert": "upsertOneQuestion" }, { "model": "Answer", "plural": "answers", "findOne": "findOneAnswer", "findMany": "findManyAnswer", "create": "createOneAnswer", "delete": "deleteOneAnswer", "update": "updateOneAnswer", "deleteMany": "deleteManyAnswer", "updateMany": "updateManyAnswer", "upsert": "upsertOneAnswer" }, { "model": "Response", "plural": "responses", "findOne": "findOneResponse", "findMany": "findManyResponse", "create": "createOneResponse", "delete": "deleteOneResponse", "update": "updateOneResponse", "deleteMany": "deleteManyResponse", "updateMany": "updateManyResponse", "upsert": "upsertOneResponse" }, { "model": "User", "plural": "users", "findOne": "findOneUser", "findMany": "findManyUser", "create": "createOneUser", "delete": "deleteOneUser", "update": "updateOneUser", "deleteMany": "deleteManyUser", "updateMany": "updateManyUser", "upsert": "upsertOneUser" }, { "model": "Note", "plural": "notes", "findOne": "findOneNote", "findMany": "findManyNote", "create": "createOneNote", "delete": "deleteOneNote", "update": "updateOneNote", "deleteMany": "deleteManyNote", "updateMany": "updateManyNote", "upsert": "upsertOneNote" }], "schema": { "enums": [{ "name": "OrderByArg", "values": ["asc", "desc"] }], "outputTypes": [{ "name": "Note", "fields": [{ "name": "id", "args": [], "outputType": { "type": "Int", "kind": "scalar", "isRequired": true, "isList": false } }, { "name": "text", "args": [], "outputType": { "type": "String", "kind": "scalar", "isRequired": true, "isList": false } }, { "name": "user", "args": [], "outputType": { "type": "User", "kind": "object", "isRequired": true, "isList": false } }] }, { "name": "User", "fields": [{ "name": "id", "args": [], "outputType": { "type": "Int", "kind": "scalar", "isRequired": true, "isList": false } }, { "name": "email", "args": [], "outputType": { "type": "String", "kind": "scalar", "isRequired": true, "isList": false } }, { "name": "responses", "args": [{ "name": "where", "inputType": [{ "type": "ResponseWhereInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "orderBy", "inputType": [{ "isList": false, "isRequired": false, "type": "ResponseOrderByInput", "kind": "object" }] }, { "name": "skip", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "after", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "before", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "first", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "last", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }], "outputType": { "type": "Response", "kind": "object", "isRequired": false, "isList": true } }, { "name": "note", "args": [], "outputType": { "type": "Note", "kind": "object", "isRequired": false, "isList": false } }, { "name": "createdAt", "args": [], "outputType": { "type": "DateTime", "kind": "scalar", "isRequired": true, "isList": false } }, { "name": "updatedAt", "args": [], "outputType": { "type": "DateTime", "kind": "scalar", "isRequired": true, "isList": false } }] }, { "name": "Response", "fields": [{ "name": "id", "args": [], "outputType": { "type": "Int", "kind": "scalar", "isRequired": true, "isList": false } }, { "name": "uid", "args": [], "outputType": { "type": "String", "kind": "scalar", "isRequired": true, "isList": false } }, { "name": "submittedAt", "args": [], "outputType": { "type": "DateTime", "kind": "scalar", "isRequired": true, "isList": false } }, { "name": "user", "args": [], "outputType": { "type": "User", "kind": "object", "isRequired": false, "isList": false } }, { "name": "form", "args": [], "outputType": { "type": "Form", "kind": "object", "isRequired": false, "isList": false } }, { "name": "answers", "args": [{ "name": "where", "inputType": [{ "type": "AnswerWhereInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "orderBy", "inputType": [{ "isList": false, "isRequired": false, "type": "AnswerOrderByInput", "kind": "object" }] }, { "name": "skip", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "after", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "before", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "first", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "last", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }], "outputType": { "type": "Answer", "kind": "object", "isRequired": false, "isList": true } }, { "name": "createdAt", "args": [], "outputType": { "type": "DateTime", "kind": "scalar", "isRequired": true, "isList": false } }, { "name": "updatedAt", "args": [], "outputType": { "type": "DateTime", "kind": "scalar", "isRequired": true, "isList": false } }] }, { "name": "Answer", "fields": [{ "name": "id", "args": [], "outputType": { "type": "Int", "kind": "scalar", "isRequired": true, "isList": false } }, { "name": "text", "args": [], "outputType": { "type": "String", "kind": "scalar", "isRequired": true, "isList": false } }, { "name": "question", "args": [], "outputType": { "type": "Question", "kind": "object", "isRequired": false, "isList": false } }, { "name": "response", "args": [], "outputType": { "type": "Response", "kind": "object", "isRequired": false, "isList": false } }, { "name": "createdAt", "args": [], "outputType": { "type": "DateTime", "kind": "scalar", "isRequired": true, "isList": false } }, { "name": "updatedAt", "args": [], "outputType": { "type": "DateTime", "kind": "scalar", "isRequired": true, "isList": false } }] }, { "name": "Question", "fields": [{ "name": "id", "args": [], "outputType": { "type": "Int", "kind": "scalar", "isRequired": true, "isList": false } }, { "name": "uid", "args": [], "outputType": { "type": "String", "kind": "scalar", "isRequired": true, "isList": false } }, { "name": "type", "args": [], "outputType": { "type": "String", "kind": "scalar", "isRequired": true, "isList": false } }, { "name": "text", "args": [], "outputType": { "type": "String", "kind": "scalar", "isRequired": true, "isList": false } }, { "name": "form", "args": [], "outputType": { "type": "Form", "kind": "object", "isRequired": false, "isList": false } }, { "name": "answers", "args": [{ "name": "where", "inputType": [{ "type": "AnswerWhereInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "orderBy", "inputType": [{ "isList": false, "isRequired": false, "type": "AnswerOrderByInput", "kind": "object" }] }, { "name": "skip", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "after", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "before", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "first", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "last", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }], "outputType": { "type": "Answer", "kind": "object", "isRequired": false, "isList": true } }, { "name": "createdAt", "args": [], "outputType": { "type": "DateTime", "kind": "scalar", "isRequired": true, "isList": false } }, { "name": "updatedAt", "args": [], "outputType": { "type": "DateTime", "kind": "scalar", "isRequired": true, "isList": false } }] }, { "name": "Form", "fields": [{ "name": "id", "args": [], "outputType": { "type": "Int", "kind": "scalar", "isRequired": true, "isList": false } }, { "name": "uid", "args": [], "outputType": { "type": "String", "kind": "scalar", "isRequired": true, "isList": false } }, { "name": "name", "args": [], "outputType": { "type": "String", "kind": "scalar", "isRequired": true, "isList": false } }, { "name": "tag", "args": [], "outputType": { "type": "String", "kind": "scalar", "isRequired": true, "isList": false } }, { "name": "questions", "args": [{ "name": "where", "inputType": [{ "type": "QuestionWhereInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "orderBy", "inputType": [{ "isList": false, "isRequired": false, "type": "QuestionOrderByInput", "kind": "object" }] }, { "name": "skip", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "after", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "before", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "first", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "last", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }], "outputType": { "type": "Question", "kind": "object", "isRequired": false, "isList": true } }, { "name": "responses", "args": [{ "name": "where", "inputType": [{ "type": "ResponseWhereInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "orderBy", "inputType": [{ "isList": false, "isRequired": false, "type": "ResponseOrderByInput", "kind": "object" }] }, { "name": "skip", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "after", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "before", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "first", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "last", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }], "outputType": { "type": "Response", "kind": "object", "isRequired": false, "isList": true } }] }, { "name": "Query", "fields": [{ "name": "findManyForm", "args": [{ "name": "where", "inputType": [{ "type": "FormWhereInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "orderBy", "inputType": [{ "isList": false, "isRequired": false, "type": "FormOrderByInput", "kind": "object" }] }, { "name": "skip", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "after", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "before", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "first", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "last", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }], "outputType": { "type": "Form", "kind": "object", "isRequired": false, "isList": true } }, { "name": "findOneForm", "args": [{ "name": "where", "inputType": [{ "type": "FormWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "Form", "kind": "object", "isRequired": false, "isList": false } }, { "name": "findManyQuestion", "args": [{ "name": "where", "inputType": [{ "type": "QuestionWhereInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "orderBy", "inputType": [{ "isList": false, "isRequired": false, "type": "QuestionOrderByInput", "kind": "object" }] }, { "name": "skip", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "after", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "before", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "first", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "last", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }], "outputType": { "type": "Question", "kind": "object", "isRequired": false, "isList": true } }, { "name": "findOneQuestion", "args": [{ "name": "where", "inputType": [{ "type": "QuestionWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "Question", "kind": "object", "isRequired": false, "isList": false } }, { "name": "findManyAnswer", "args": [{ "name": "where", "inputType": [{ "type": "AnswerWhereInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "orderBy", "inputType": [{ "isList": false, "isRequired": false, "type": "AnswerOrderByInput", "kind": "object" }] }, { "name": "skip", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "after", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "before", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "first", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "last", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }], "outputType": { "type": "Answer", "kind": "object", "isRequired": false, "isList": true } }, { "name": "findOneAnswer", "args": [{ "name": "where", "inputType": [{ "type": "AnswerWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "Answer", "kind": "object", "isRequired": false, "isList": false } }, { "name": "findManyResponse", "args": [{ "name": "where", "inputType": [{ "type": "ResponseWhereInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "orderBy", "inputType": [{ "isList": false, "isRequired": false, "type": "ResponseOrderByInput", "kind": "object" }] }, { "name": "skip", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "after", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "before", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "first", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "last", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }], "outputType": { "type": "Response", "kind": "object", "isRequired": false, "isList": true } }, { "name": "findOneResponse", "args": [{ "name": "where", "inputType": [{ "type": "ResponseWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "Response", "kind": "object", "isRequired": false, "isList": false } }, { "name": "findManyUser", "args": [{ "name": "where", "inputType": [{ "type": "UserWhereInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "orderBy", "inputType": [{ "isList": false, "isRequired": false, "type": "UserOrderByInput", "kind": "object" }] }, { "name": "skip", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "after", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "before", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "first", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "last", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }], "outputType": { "type": "User", "kind": "object", "isRequired": false, "isList": true } }, { "name": "findOneUser", "args": [{ "name": "where", "inputType": [{ "type": "UserWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "User", "kind": "object", "isRequired": false, "isList": false } }, { "name": "findManyNote", "args": [{ "name": "where", "inputType": [{ "type": "NoteWhereInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "orderBy", "inputType": [{ "isList": false, "isRequired": false, "type": "NoteOrderByInput", "kind": "object" }] }, { "name": "skip", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "after", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "before", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "first", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "last", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }], "outputType": { "type": "Note", "kind": "object", "isRequired": false, "isList": true } }, { "name": "findOneNote", "args": [{ "name": "where", "inputType": [{ "type": "NoteWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "Note", "kind": "object", "isRequired": false, "isList": false } }] }, { "name": "BatchPayload", "fields": [{ "name": "count", "args": [], "outputType": { "type": "Int", "kind": "scalar", "isRequired": true, "isList": false } }] }, { "name": "Mutation", "fields": [{ "name": "createOneForm", "args": [{ "name": "data", "inputType": [{ "type": "FormCreateInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "Form", "kind": "object", "isRequired": true, "isList": false } }, { "name": "deleteOneForm", "args": [{ "name": "where", "inputType": [{ "type": "FormWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "Form", "kind": "object", "isRequired": false, "isList": false } }, { "name": "updateOneForm", "args": [{ "name": "data", "inputType": [{ "type": "FormUpdateInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "where", "inputType": [{ "type": "FormWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "Form", "kind": "object", "isRequired": false, "isList": false } }, { "name": "upsertOneForm", "args": [{ "name": "where", "inputType": [{ "type": "FormWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "create", "inputType": [{ "type": "FormCreateInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "update", "inputType": [{ "type": "FormUpdateInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "Form", "kind": "object", "isRequired": true, "isList": false } }, { "name": "updateManyForm", "args": [{ "name": "data", "inputType": [{ "type": "FormUpdateManyMutationInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "where", "inputType": [{ "type": "FormWhereInput", "kind": "object", "isRequired": false, "isList": false }] }], "outputType": { "type": "BatchPayload", "kind": "object", "isRequired": true, "isList": false } }, { "name": "deleteManyForm", "args": [{ "name": "where", "inputType": [{ "type": "FormWhereInput", "kind": "object", "isRequired": false, "isList": false }] }], "outputType": { "type": "BatchPayload", "kind": "object", "isRequired": true, "isList": false } }, { "name": "createOneQuestion", "args": [{ "name": "data", "inputType": [{ "type": "QuestionCreateInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "Question", "kind": "object", "isRequired": true, "isList": false } }, { "name": "deleteOneQuestion", "args": [{ "name": "where", "inputType": [{ "type": "QuestionWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "Question", "kind": "object", "isRequired": false, "isList": false } }, { "name": "updateOneQuestion", "args": [{ "name": "data", "inputType": [{ "type": "QuestionUpdateInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "where", "inputType": [{ "type": "QuestionWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "Question", "kind": "object", "isRequired": false, "isList": false } }, { "name": "upsertOneQuestion", "args": [{ "name": "where", "inputType": [{ "type": "QuestionWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "create", "inputType": [{ "type": "QuestionCreateInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "update", "inputType": [{ "type": "QuestionUpdateInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "Question", "kind": "object", "isRequired": true, "isList": false } }, { "name": "updateManyQuestion", "args": [{ "name": "data", "inputType": [{ "type": "QuestionUpdateManyMutationInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "where", "inputType": [{ "type": "QuestionWhereInput", "kind": "object", "isRequired": false, "isList": false }] }], "outputType": { "type": "BatchPayload", "kind": "object", "isRequired": true, "isList": false } }, { "name": "deleteManyQuestion", "args": [{ "name": "where", "inputType": [{ "type": "QuestionWhereInput", "kind": "object", "isRequired": false, "isList": false }] }], "outputType": { "type": "BatchPayload", "kind": "object", "isRequired": true, "isList": false } }, { "name": "createOneAnswer", "args": [{ "name": "data", "inputType": [{ "type": "AnswerCreateInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "Answer", "kind": "object", "isRequired": true, "isList": false } }, { "name": "deleteOneAnswer", "args": [{ "name": "where", "inputType": [{ "type": "AnswerWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "Answer", "kind": "object", "isRequired": false, "isList": false } }, { "name": "updateOneAnswer", "args": [{ "name": "data", "inputType": [{ "type": "AnswerUpdateInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "where", "inputType": [{ "type": "AnswerWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "Answer", "kind": "object", "isRequired": false, "isList": false } }, { "name": "upsertOneAnswer", "args": [{ "name": "where", "inputType": [{ "type": "AnswerWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "create", "inputType": [{ "type": "AnswerCreateInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "update", "inputType": [{ "type": "AnswerUpdateInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "Answer", "kind": "object", "isRequired": true, "isList": false } }, { "name": "updateManyAnswer", "args": [{ "name": "data", "inputType": [{ "type": "AnswerUpdateManyMutationInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "where", "inputType": [{ "type": "AnswerWhereInput", "kind": "object", "isRequired": false, "isList": false }] }], "outputType": { "type": "BatchPayload", "kind": "object", "isRequired": true, "isList": false } }, { "name": "deleteManyAnswer", "args": [{ "name": "where", "inputType": [{ "type": "AnswerWhereInput", "kind": "object", "isRequired": false, "isList": false }] }], "outputType": { "type": "BatchPayload", "kind": "object", "isRequired": true, "isList": false } }, { "name": "createOneResponse", "args": [{ "name": "data", "inputType": [{ "type": "ResponseCreateInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "Response", "kind": "object", "isRequired": true, "isList": false } }, { "name": "deleteOneResponse", "args": [{ "name": "where", "inputType": [{ "type": "ResponseWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "Response", "kind": "object", "isRequired": false, "isList": false } }, { "name": "updateOneResponse", "args": [{ "name": "data", "inputType": [{ "type": "ResponseUpdateInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "where", "inputType": [{ "type": "ResponseWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "Response", "kind": "object", "isRequired": false, "isList": false } }, { "name": "upsertOneResponse", "args": [{ "name": "where", "inputType": [{ "type": "ResponseWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "create", "inputType": [{ "type": "ResponseCreateInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "update", "inputType": [{ "type": "ResponseUpdateInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "Response", "kind": "object", "isRequired": true, "isList": false } }, { "name": "updateManyResponse", "args": [{ "name": "data", "inputType": [{ "type": "ResponseUpdateManyMutationInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "where", "inputType": [{ "type": "ResponseWhereInput", "kind": "object", "isRequired": false, "isList": false }] }], "outputType": { "type": "BatchPayload", "kind": "object", "isRequired": true, "isList": false } }, { "name": "deleteManyResponse", "args": [{ "name": "where", "inputType": [{ "type": "ResponseWhereInput", "kind": "object", "isRequired": false, "isList": false }] }], "outputType": { "type": "BatchPayload", "kind": "object", "isRequired": true, "isList": false } }, { "name": "createOneUser", "args": [{ "name": "data", "inputType": [{ "type": "UserCreateInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "User", "kind": "object", "isRequired": true, "isList": false } }, { "name": "deleteOneUser", "args": [{ "name": "where", "inputType": [{ "type": "UserWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "User", "kind": "object", "isRequired": false, "isList": false } }, { "name": "updateOneUser", "args": [{ "name": "data", "inputType": [{ "type": "UserUpdateInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "where", "inputType": [{ "type": "UserWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "User", "kind": "object", "isRequired": false, "isList": false } }, { "name": "upsertOneUser", "args": [{ "name": "where", "inputType": [{ "type": "UserWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "create", "inputType": [{ "type": "UserCreateInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "update", "inputType": [{ "type": "UserUpdateInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "User", "kind": "object", "isRequired": true, "isList": false } }, { "name": "updateManyUser", "args": [{ "name": "data", "inputType": [{ "type": "UserUpdateManyMutationInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "where", "inputType": [{ "type": "UserWhereInput", "kind": "object", "isRequired": false, "isList": false }] }], "outputType": { "type": "BatchPayload", "kind": "object", "isRequired": true, "isList": false } }, { "name": "deleteManyUser", "args": [{ "name": "where", "inputType": [{ "type": "UserWhereInput", "kind": "object", "isRequired": false, "isList": false }] }], "outputType": { "type": "BatchPayload", "kind": "object", "isRequired": true, "isList": false } }, { "name": "createOneNote", "args": [{ "name": "data", "inputType": [{ "type": "NoteCreateInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "Note", "kind": "object", "isRequired": true, "isList": false } }, { "name": "deleteOneNote", "args": [{ "name": "where", "inputType": [{ "type": "NoteWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "Note", "kind": "object", "isRequired": false, "isList": false } }, { "name": "updateOneNote", "args": [{ "name": "data", "inputType": [{ "type": "NoteUpdateInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "where", "inputType": [{ "type": "NoteWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "Note", "kind": "object", "isRequired": false, "isList": false } }, { "name": "upsertOneNote", "args": [{ "name": "where", "inputType": [{ "type": "NoteWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "create", "inputType": [{ "type": "NoteCreateInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "update", "inputType": [{ "type": "NoteUpdateInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "Note", "kind": "object", "isRequired": true, "isList": false } }, { "name": "updateManyNote", "args": [{ "name": "data", "inputType": [{ "type": "NoteUpdateManyMutationInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "where", "inputType": [{ "type": "NoteWhereInput", "kind": "object", "isRequired": false, "isList": false }] }], "outputType": { "type": "BatchPayload", "kind": "object", "isRequired": true, "isList": false } }, { "name": "deleteManyNote", "args": [{ "name": "where", "inputType": [{ "type": "NoteWhereInput", "kind": "object", "isRequired": false, "isList": false }] }], "outputType": { "type": "BatchPayload", "kind": "object", "isRequired": true, "isList": false } }] }], "inputTypes": [{ "name": "NoteWhereInput", "fields": [{ "name": "id", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "Int" }, { "type": "IntFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "text", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "String" }, { "type": "StringFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "AND", "inputType": [{ "type": "NoteWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }, { "name": "OR", "inputType": [{ "type": "NoteWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }, { "name": "NOT", "inputType": [{ "type": "NoteWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }, { "name": "user", "inputType": [{ "type": "UserWhereInput", "kind": "object", "isRequired": false, "isList": false }], "isRelationFilter": true }], "isWhereType": true, "atLeastOne": false }, { "name": "UserWhereInput", "fields": [{ "name": "id", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "Int" }, { "type": "IntFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "email", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "String" }, { "type": "StringFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "responses", "inputType": [{ "type": "ResponseFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "createdAt", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "DateTime" }, { "type": "DateTimeFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "updatedAt", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "DateTime" }, { "type": "DateTimeFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "AND", "inputType": [{ "type": "UserWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }, { "name": "OR", "inputType": [{ "type": "UserWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }, { "name": "NOT", "inputType": [{ "type": "UserWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }, { "name": "note", "inputType": [{ "type": "NoteWhereInput", "kind": "object", "isRequired": false, "isList": false }], "isRelationFilter": true }], "isWhereType": true, "atLeastOne": false }, { "name": "ResponseWhereInput", "fields": [{ "name": "id", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "Int" }, { "type": "IntFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "uid", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "String" }, { "type": "StringFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "submittedAt", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "DateTime" }, { "type": "DateTimeFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "answers", "inputType": [{ "type": "AnswerFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "createdAt", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "DateTime" }, { "type": "DateTimeFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "updatedAt", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "DateTime" }, { "type": "DateTimeFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "AND", "inputType": [{ "type": "ResponseWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }, { "name": "OR", "inputType": [{ "type": "ResponseWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }, { "name": "NOT", "inputType": [{ "type": "ResponseWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }, { "name": "user", "inputType": [{ "type": "UserWhereInput", "kind": "object", "isRequired": false, "isList": false }], "isRelationFilter": true }, { "name": "form", "inputType": [{ "type": "FormWhereInput", "kind": "object", "isRequired": false, "isList": false }], "isRelationFilter": true }], "isWhereType": true, "atLeastOne": false }, { "name": "AnswerWhereInput", "fields": [{ "name": "id", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "Int" }, { "type": "IntFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "text", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "String" }, { "type": "StringFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "createdAt", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "DateTime" }, { "type": "DateTimeFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "updatedAt", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "DateTime" }, { "type": "DateTimeFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "AND", "inputType": [{ "type": "AnswerWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }, { "name": "OR", "inputType": [{ "type": "AnswerWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }, { "name": "NOT", "inputType": [{ "type": "AnswerWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }, { "name": "question", "inputType": [{ "type": "QuestionWhereInput", "kind": "object", "isRequired": false, "isList": false }], "isRelationFilter": true }, { "name": "response", "inputType": [{ "type": "ResponseWhereInput", "kind": "object", "isRequired": false, "isList": false }], "isRelationFilter": true }], "isWhereType": true, "atLeastOne": false }, { "name": "QuestionWhereInput", "fields": [{ "name": "id", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "Int" }, { "type": "IntFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "uid", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "String" }, { "type": "StringFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "type", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "String" }, { "type": "StringFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "text", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "String" }, { "type": "StringFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "answers", "inputType": [{ "type": "AnswerFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "createdAt", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "DateTime" }, { "type": "DateTimeFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "updatedAt", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "DateTime" }, { "type": "DateTimeFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "AND", "inputType": [{ "type": "QuestionWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }, { "name": "OR", "inputType": [{ "type": "QuestionWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }, { "name": "NOT", "inputType": [{ "type": "QuestionWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }, { "name": "form", "inputType": [{ "type": "FormWhereInput", "kind": "object", "isRequired": false, "isList": false }], "isRelationFilter": true }], "isWhereType": true, "atLeastOne": false }, { "name": "FormWhereInput", "fields": [{ "name": "id", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "Int" }, { "type": "IntFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "uid", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "String" }, { "type": "StringFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "name", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "String" }, { "type": "StringFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "tag", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "String" }, { "type": "StringFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "questions", "inputType": [{ "type": "QuestionFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "responses", "inputType": [{ "type": "ResponseFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "AND", "inputType": [{ "type": "FormWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }, { "name": "OR", "inputType": [{ "type": "FormWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }, { "name": "NOT", "inputType": [{ "type": "FormWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }], "isWhereType": true, "atLeastOne": false }, { "name": "FormWhereUniqueInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "uid", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }], "atLeastOne": true }, { "name": "QuestionWhereUniqueInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "uid", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }], "atLeastOne": true }, { "name": "AnswerWhereUniqueInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }], "atLeastOne": true }, { "name": "ResponseWhereUniqueInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "uid", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }], "atLeastOne": true }, { "name": "UserWhereUniqueInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "email", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }], "atLeastOne": true }, { "name": "NoteWhereUniqueInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }], "atLeastOne": true }, { "name": "NoteCreateWithoutUserInput", "fields": [{ "name": "text", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": true, "isList": false }] }] }, { "name": "NoteCreateOneWithoutNoteInput", "fields": [{ "name": "create", "inputType": [{ "type": "NoteCreateWithoutUserInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "connect", "inputType": [{ "type": "NoteWhereUniqueInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "UserCreateWithoutResponsesInput", "fields": [{ "name": "email", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "updatedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "note", "inputType": [{ "type": "NoteCreateOneWithoutNoteInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "UserCreateOneWithoutUserInput", "fields": [{ "name": "create", "inputType": [{ "type": "UserCreateWithoutResponsesInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "connect", "inputType": [{ "type": "UserWhereUniqueInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "FormCreateWithoutResponsesInput", "fields": [{ "name": "uid", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "name", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "tag", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "questions", "inputType": [{ "type": "QuestionCreateManyWithoutQuestionsInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "FormCreateOneWithoutFormInput", "fields": [{ "name": "create", "inputType": [{ "type": "FormCreateWithoutResponsesInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "connect", "inputType": [{ "type": "FormWhereUniqueInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "ResponseCreateWithoutAnswersInput", "fields": [{ "name": "uid", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "submittedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "updatedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "user", "inputType": [{ "type": "UserCreateOneWithoutUserInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "form", "inputType": [{ "type": "FormCreateOneWithoutFormInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "ResponseCreateOneWithoutResponseInput", "fields": [{ "name": "create", "inputType": [{ "type": "ResponseCreateWithoutAnswersInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "connect", "inputType": [{ "type": "ResponseWhereUniqueInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "AnswerCreateWithoutQuestionInput", "fields": [{ "name": "text", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "updatedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "response", "inputType": [{ "type": "ResponseCreateOneWithoutResponseInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "AnswerCreateManyWithoutAnswersInput", "fields": [{ "name": "create", "inputType": [{ "type": "AnswerCreateWithoutQuestionInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "connect", "inputType": [{ "type": "AnswerWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }] }, { "name": "QuestionCreateWithoutFormInput", "fields": [{ "name": "uid", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "type", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "text", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "updatedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "answers", "inputType": [{ "type": "AnswerCreateManyWithoutAnswersInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "QuestionCreateManyWithoutQuestionsInput", "fields": [{ "name": "create", "inputType": [{ "type": "QuestionCreateWithoutFormInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "connect", "inputType": [{ "type": "QuestionWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }] }, { "name": "ResponseCreateWithoutFormInput", "fields": [{ "name": "uid", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "submittedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "updatedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "user", "inputType": [{ "type": "UserCreateOneWithoutUserInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "answers", "inputType": [{ "type": "AnswerCreateManyWithoutAnswersInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "ResponseCreateManyWithoutResponsesInput", "fields": [{ "name": "create", "inputType": [{ "type": "ResponseCreateWithoutFormInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "connect", "inputType": [{ "type": "ResponseWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }] }, { "name": "FormCreateInput", "fields": [{ "name": "uid", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "name", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "tag", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "questions", "inputType": [{ "type": "QuestionCreateManyWithoutQuestionsInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "responses", "inputType": [{ "type": "ResponseCreateManyWithoutResponsesInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "NoteUpdateWithoutUserDataInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "text", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }] }, { "name": "NoteUpsertWithoutUserInput", "fields": [{ "name": "update", "inputType": [{ "type": "NoteUpdateWithoutUserDataInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "create", "inputType": [{ "type": "NoteCreateWithoutUserInput", "kind": "object", "isRequired": true, "isList": false }] }] }, { "name": "NoteUpdateOneWithoutUserInput", "fields": [{ "name": "create", "inputType": [{ "type": "NoteCreateWithoutUserInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "connect", "inputType": [{ "type": "NoteWhereUniqueInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "disconnect", "inputType": [{ "type": "Boolean", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "delete", "inputType": [{ "type": "Boolean", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "update", "inputType": [{ "type": "NoteUpdateWithoutUserDataInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "upsert", "inputType": [{ "type": "NoteUpsertWithoutUserInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "UserUpdateWithoutResponsesDataInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "email", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "updatedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "note", "inputType": [{ "type": "NoteUpdateOneWithoutUserInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "UserUpsertWithoutResponsesInput", "fields": [{ "name": "update", "inputType": [{ "type": "UserUpdateWithoutResponsesDataInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "create", "inputType": [{ "type": "UserCreateWithoutResponsesInput", "kind": "object", "isRequired": true, "isList": false }] }] }, { "name": "UserUpdateOneWithoutResponsesInput", "fields": [{ "name": "create", "inputType": [{ "type": "UserCreateWithoutResponsesInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "connect", "inputType": [{ "type": "UserWhereUniqueInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "disconnect", "inputType": [{ "type": "Boolean", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "delete", "inputType": [{ "type": "Boolean", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "update", "inputType": [{ "type": "UserUpdateWithoutResponsesDataInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "upsert", "inputType": [{ "type": "UserUpsertWithoutResponsesInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "FormUpdateWithoutResponsesDataInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "uid", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "name", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "tag", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "questions", "inputType": [{ "type": "QuestionUpdateManyWithoutFormInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "FormUpsertWithoutResponsesInput", "fields": [{ "name": "update", "inputType": [{ "type": "FormUpdateWithoutResponsesDataInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "create", "inputType": [{ "type": "FormCreateWithoutResponsesInput", "kind": "object", "isRequired": true, "isList": false }] }] }, { "name": "FormUpdateOneWithoutResponsesInput", "fields": [{ "name": "create", "inputType": [{ "type": "FormCreateWithoutResponsesInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "connect", "inputType": [{ "type": "FormWhereUniqueInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "disconnect", "inputType": [{ "type": "Boolean", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "delete", "inputType": [{ "type": "Boolean", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "update", "inputType": [{ "type": "FormUpdateWithoutResponsesDataInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "upsert", "inputType": [{ "type": "FormUpsertWithoutResponsesInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "ResponseUpdateWithoutAnswersDataInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "uid", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "submittedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "updatedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "user", "inputType": [{ "type": "UserUpdateOneWithoutResponsesInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "form", "inputType": [{ "type": "FormUpdateOneWithoutResponsesInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "ResponseUpsertWithoutAnswersInput", "fields": [{ "name": "update", "inputType": [{ "type": "ResponseUpdateWithoutAnswersDataInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "create", "inputType": [{ "type": "ResponseCreateWithoutAnswersInput", "kind": "object", "isRequired": true, "isList": false }] }] }, { "name": "ResponseUpdateOneWithoutAnswersInput", "fields": [{ "name": "create", "inputType": [{ "type": "ResponseCreateWithoutAnswersInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "connect", "inputType": [{ "type": "ResponseWhereUniqueInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "disconnect", "inputType": [{ "type": "Boolean", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "delete", "inputType": [{ "type": "Boolean", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "update", "inputType": [{ "type": "ResponseUpdateWithoutAnswersDataInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "upsert", "inputType": [{ "type": "ResponseUpsertWithoutAnswersInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "AnswerUpdateWithoutQuestionDataInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "text", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "updatedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "response", "inputType": [{ "type": "ResponseUpdateOneWithoutAnswersInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "AnswerUpdateWithWhereUniqueWithoutQuestionInput", "fields": [{ "name": "where", "inputType": [{ "type": "AnswerWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "data", "inputType": [{ "type": "AnswerUpdateWithoutQuestionDataInput", "kind": "object", "isRequired": true, "isList": false }] }] }, { "name": "AnswerScalarWhereInput", "fields": [{ "name": "id", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "Int" }, { "type": "IntFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "text", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "String" }, { "type": "StringFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "createdAt", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "DateTime" }, { "type": "DateTimeFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "updatedAt", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "DateTime" }, { "type": "DateTimeFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "AND", "inputType": [{ "type": "AnswerScalarWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }, { "name": "OR", "inputType": [{ "type": "AnswerScalarWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }, { "name": "NOT", "inputType": [{ "type": "AnswerScalarWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }], "isWhereType": true, "atLeastOne": false }, { "name": "AnswerUpdateManyDataInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "text", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "updatedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }] }, { "name": "AnswerUpdateManyWithWhereNestedInput", "fields": [{ "name": "where", "inputType": [{ "type": "AnswerScalarWhereInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "data", "inputType": [{ "type": "AnswerUpdateManyDataInput", "kind": "object", "isRequired": true, "isList": false }] }] }, { "name": "AnswerUpsertWithWhereUniqueWithoutQuestionInput", "fields": [{ "name": "where", "inputType": [{ "type": "AnswerWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "update", "inputType": [{ "type": "AnswerUpdateWithoutQuestionDataInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "create", "inputType": [{ "type": "AnswerCreateWithoutQuestionInput", "kind": "object", "isRequired": true, "isList": false }] }] }, { "name": "AnswerUpdateManyWithoutQuestionInput", "fields": [{ "name": "create", "inputType": [{ "type": "AnswerCreateWithoutQuestionInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "connect", "inputType": [{ "type": "AnswerWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "set", "inputType": [{ "type": "AnswerWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "disconnect", "inputType": [{ "type": "AnswerWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "delete", "inputType": [{ "type": "AnswerWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "update", "inputType": [{ "type": "AnswerUpdateWithWhereUniqueWithoutQuestionInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "updateMany", "inputType": [{ "type": "AnswerUpdateManyWithWhereNestedInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "deleteMany", "inputType": [{ "type": "AnswerScalarWhereInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "upsert", "inputType": [{ "type": "AnswerUpsertWithWhereUniqueWithoutQuestionInput", "kind": "object", "isRequired": false, "isList": true }] }] }, { "name": "QuestionUpdateWithoutFormDataInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "uid", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "type", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "text", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "updatedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "answers", "inputType": [{ "type": "AnswerUpdateManyWithoutQuestionInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "QuestionUpdateWithWhereUniqueWithoutFormInput", "fields": [{ "name": "where", "inputType": [{ "type": "QuestionWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "data", "inputType": [{ "type": "QuestionUpdateWithoutFormDataInput", "kind": "object", "isRequired": true, "isList": false }] }] }, { "name": "QuestionScalarWhereInput", "fields": [{ "name": "id", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "Int" }, { "type": "IntFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "uid", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "String" }, { "type": "StringFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "type", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "String" }, { "type": "StringFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "text", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "String" }, { "type": "StringFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "answers", "inputType": [{ "type": "AnswerFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "createdAt", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "DateTime" }, { "type": "DateTimeFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "updatedAt", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "DateTime" }, { "type": "DateTimeFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "AND", "inputType": [{ "type": "QuestionScalarWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }, { "name": "OR", "inputType": [{ "type": "QuestionScalarWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }, { "name": "NOT", "inputType": [{ "type": "QuestionScalarWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }], "isWhereType": true, "atLeastOne": false }, { "name": "QuestionUpdateManyDataInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "uid", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "type", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "text", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "updatedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }] }, { "name": "QuestionUpdateManyWithWhereNestedInput", "fields": [{ "name": "where", "inputType": [{ "type": "QuestionScalarWhereInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "data", "inputType": [{ "type": "QuestionUpdateManyDataInput", "kind": "object", "isRequired": true, "isList": false }] }] }, { "name": "QuestionUpsertWithWhereUniqueWithoutFormInput", "fields": [{ "name": "where", "inputType": [{ "type": "QuestionWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "update", "inputType": [{ "type": "QuestionUpdateWithoutFormDataInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "create", "inputType": [{ "type": "QuestionCreateWithoutFormInput", "kind": "object", "isRequired": true, "isList": false }] }] }, { "name": "QuestionUpdateManyWithoutFormInput", "fields": [{ "name": "create", "inputType": [{ "type": "QuestionCreateWithoutFormInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "connect", "inputType": [{ "type": "QuestionWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "set", "inputType": [{ "type": "QuestionWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "disconnect", "inputType": [{ "type": "QuestionWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "delete", "inputType": [{ "type": "QuestionWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "update", "inputType": [{ "type": "QuestionUpdateWithWhereUniqueWithoutFormInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "updateMany", "inputType": [{ "type": "QuestionUpdateManyWithWhereNestedInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "deleteMany", "inputType": [{ "type": "QuestionScalarWhereInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "upsert", "inputType": [{ "type": "QuestionUpsertWithWhereUniqueWithoutFormInput", "kind": "object", "isRequired": false, "isList": true }] }] }, { "name": "QuestionCreateWithoutAnswersInput", "fields": [{ "name": "uid", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "type", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "text", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "updatedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "form", "inputType": [{ "type": "FormCreateOneWithoutFormInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "QuestionCreateOneWithoutQuestionInput", "fields": [{ "name": "create", "inputType": [{ "type": "QuestionCreateWithoutAnswersInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "connect", "inputType": [{ "type": "QuestionWhereUniqueInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "AnswerCreateWithoutResponseInput", "fields": [{ "name": "text", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "updatedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "question", "inputType": [{ "type": "QuestionCreateOneWithoutQuestionInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "FormCreateWithoutQuestionsInput", "fields": [{ "name": "uid", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "name", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "tag", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "responses", "inputType": [{ "type": "ResponseCreateManyWithoutResponsesInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "FormUpdateWithoutQuestionsDataInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "uid", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "name", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "tag", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "responses", "inputType": [{ "type": "ResponseUpdateManyWithoutFormInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "FormUpsertWithoutQuestionsInput", "fields": [{ "name": "update", "inputType": [{ "type": "FormUpdateWithoutQuestionsDataInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "create", "inputType": [{ "type": "FormCreateWithoutQuestionsInput", "kind": "object", "isRequired": true, "isList": false }] }] }, { "name": "FormUpdateOneWithoutQuestionsInput", "fields": [{ "name": "create", "inputType": [{ "type": "FormCreateWithoutQuestionsInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "connect", "inputType": [{ "type": "FormWhereUniqueInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "disconnect", "inputType": [{ "type": "Boolean", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "delete", "inputType": [{ "type": "Boolean", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "update", "inputType": [{ "type": "FormUpdateWithoutQuestionsDataInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "upsert", "inputType": [{ "type": "FormUpsertWithoutQuestionsInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "QuestionUpdateWithoutAnswersDataInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "uid", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "type", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "text", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "updatedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "form", "inputType": [{ "type": "FormUpdateOneWithoutQuestionsInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "QuestionUpsertWithoutAnswersInput", "fields": [{ "name": "update", "inputType": [{ "type": "QuestionUpdateWithoutAnswersDataInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "create", "inputType": [{ "type": "QuestionCreateWithoutAnswersInput", "kind": "object", "isRequired": true, "isList": false }] }] }, { "name": "QuestionUpdateOneWithoutAnswersInput", "fields": [{ "name": "create", "inputType": [{ "type": "QuestionCreateWithoutAnswersInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "connect", "inputType": [{ "type": "QuestionWhereUniqueInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "disconnect", "inputType": [{ "type": "Boolean", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "delete", "inputType": [{ "type": "Boolean", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "update", "inputType": [{ "type": "QuestionUpdateWithoutAnswersDataInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "upsert", "inputType": [{ "type": "QuestionUpsertWithoutAnswersInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "AnswerUpdateWithoutResponseDataInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "text", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "updatedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "question", "inputType": [{ "type": "QuestionUpdateOneWithoutAnswersInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "AnswerUpdateWithWhereUniqueWithoutResponseInput", "fields": [{ "name": "where", "inputType": [{ "type": "AnswerWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "data", "inputType": [{ "type": "AnswerUpdateWithoutResponseDataInput", "kind": "object", "isRequired": true, "isList": false }] }] }, { "name": "AnswerUpsertWithWhereUniqueWithoutResponseInput", "fields": [{ "name": "where", "inputType": [{ "type": "AnswerWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "update", "inputType": [{ "type": "AnswerUpdateWithoutResponseDataInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "create", "inputType": [{ "type": "AnswerCreateWithoutResponseInput", "kind": "object", "isRequired": true, "isList": false }] }] }, { "name": "AnswerUpdateManyWithoutResponseInput", "fields": [{ "name": "create", "inputType": [{ "type": "AnswerCreateWithoutResponseInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "connect", "inputType": [{ "type": "AnswerWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "set", "inputType": [{ "type": "AnswerWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "disconnect", "inputType": [{ "type": "AnswerWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "delete", "inputType": [{ "type": "AnswerWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "update", "inputType": [{ "type": "AnswerUpdateWithWhereUniqueWithoutResponseInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "updateMany", "inputType": [{ "type": "AnswerUpdateManyWithWhereNestedInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "deleteMany", "inputType": [{ "type": "AnswerScalarWhereInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "upsert", "inputType": [{ "type": "AnswerUpsertWithWhereUniqueWithoutResponseInput", "kind": "object", "isRequired": false, "isList": true }] }] }, { "name": "ResponseUpdateWithoutFormDataInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "uid", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "submittedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "updatedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "user", "inputType": [{ "type": "UserUpdateOneWithoutResponsesInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "answers", "inputType": [{ "type": "AnswerUpdateManyWithoutResponseInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "ResponseUpdateWithWhereUniqueWithoutFormInput", "fields": [{ "name": "where", "inputType": [{ "type": "ResponseWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "data", "inputType": [{ "type": "ResponseUpdateWithoutFormDataInput", "kind": "object", "isRequired": true, "isList": false }] }] }, { "name": "ResponseScalarWhereInput", "fields": [{ "name": "id", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "Int" }, { "type": "IntFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "uid", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "String" }, { "type": "StringFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "submittedAt", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "DateTime" }, { "type": "DateTimeFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "answers", "inputType": [{ "type": "AnswerFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "createdAt", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "DateTime" }, { "type": "DateTimeFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "updatedAt", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "DateTime" }, { "type": "DateTimeFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "AND", "inputType": [{ "type": "ResponseScalarWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }, { "name": "OR", "inputType": [{ "type": "ResponseScalarWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }, { "name": "NOT", "inputType": [{ "type": "ResponseScalarWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }], "isWhereType": true, "atLeastOne": false }, { "name": "ResponseUpdateManyDataInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "uid", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "submittedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "updatedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }] }, { "name": "ResponseUpdateManyWithWhereNestedInput", "fields": [{ "name": "where", "inputType": [{ "type": "ResponseScalarWhereInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "data", "inputType": [{ "type": "ResponseUpdateManyDataInput", "kind": "object", "isRequired": true, "isList": false }] }] }, { "name": "ResponseUpsertWithWhereUniqueWithoutFormInput", "fields": [{ "name": "where", "inputType": [{ "type": "ResponseWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "update", "inputType": [{ "type": "ResponseUpdateWithoutFormDataInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "create", "inputType": [{ "type": "ResponseCreateWithoutFormInput", "kind": "object", "isRequired": true, "isList": false }] }] }, { "name": "ResponseUpdateManyWithoutFormInput", "fields": [{ "name": "create", "inputType": [{ "type": "ResponseCreateWithoutFormInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "connect", "inputType": [{ "type": "ResponseWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "set", "inputType": [{ "type": "ResponseWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "disconnect", "inputType": [{ "type": "ResponseWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "delete", "inputType": [{ "type": "ResponseWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "update", "inputType": [{ "type": "ResponseUpdateWithWhereUniqueWithoutFormInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "updateMany", "inputType": [{ "type": "ResponseUpdateManyWithWhereNestedInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "deleteMany", "inputType": [{ "type": "ResponseScalarWhereInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "upsert", "inputType": [{ "type": "ResponseUpsertWithWhereUniqueWithoutFormInput", "kind": "object", "isRequired": false, "isList": true }] }] }, { "name": "FormUpdateInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "uid", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "name", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "tag", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "questions", "inputType": [{ "type": "QuestionUpdateManyWithoutFormInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "responses", "inputType": [{ "type": "ResponseUpdateManyWithoutFormInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "FormUpdateManyMutationInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "uid", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "name", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "tag", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }] }, { "name": "QuestionCreateInput", "fields": [{ "name": "uid", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "type", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "text", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "updatedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "form", "inputType": [{ "type": "FormCreateOneWithoutFormInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "answers", "inputType": [{ "type": "AnswerCreateManyWithoutAnswersInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "QuestionUpdateInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "uid", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "type", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "text", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "updatedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "form", "inputType": [{ "type": "FormUpdateOneWithoutQuestionsInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "answers", "inputType": [{ "type": "AnswerUpdateManyWithoutQuestionInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "QuestionUpdateManyMutationInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "uid", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "type", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "text", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "updatedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }] }, { "name": "AnswerCreateInput", "fields": [{ "name": "text", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "updatedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "question", "inputType": [{ "type": "QuestionCreateOneWithoutQuestionInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "response", "inputType": [{ "type": "ResponseCreateOneWithoutResponseInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "AnswerUpdateInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "text", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "updatedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "question", "inputType": [{ "type": "QuestionUpdateOneWithoutAnswersInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "response", "inputType": [{ "type": "ResponseUpdateOneWithoutAnswersInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "AnswerUpdateManyMutationInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "text", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "updatedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }] }, { "name": "ResponseCreateInput", "fields": [{ "name": "uid", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "submittedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "updatedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "user", "inputType": [{ "type": "UserCreateOneWithoutUserInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "form", "inputType": [{ "type": "FormCreateOneWithoutFormInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "answers", "inputType": [{ "type": "AnswerCreateManyWithoutAnswersInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "ResponseUpdateInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "uid", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "submittedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "updatedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "user", "inputType": [{ "type": "UserUpdateOneWithoutResponsesInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "form", "inputType": [{ "type": "FormUpdateOneWithoutResponsesInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "answers", "inputType": [{ "type": "AnswerUpdateManyWithoutResponseInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "ResponseUpdateManyMutationInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "uid", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "submittedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "updatedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }] }, { "name": "UserCreateInput", "fields": [{ "name": "email", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "updatedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "responses", "inputType": [{ "type": "ResponseCreateManyWithoutResponsesInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "note", "inputType": [{ "type": "NoteCreateOneWithoutNoteInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "ResponseCreateWithoutUserInput", "fields": [{ "name": "uid", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "submittedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "updatedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "form", "inputType": [{ "type": "FormCreateOneWithoutFormInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "answers", "inputType": [{ "type": "AnswerCreateManyWithoutAnswersInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "ResponseUpdateWithoutUserDataInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "uid", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "submittedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "updatedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "form", "inputType": [{ "type": "FormUpdateOneWithoutResponsesInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "answers", "inputType": [{ "type": "AnswerUpdateManyWithoutResponseInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "ResponseUpdateWithWhereUniqueWithoutUserInput", "fields": [{ "name": "where", "inputType": [{ "type": "ResponseWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "data", "inputType": [{ "type": "ResponseUpdateWithoutUserDataInput", "kind": "object", "isRequired": true, "isList": false }] }] }, { "name": "ResponseUpsertWithWhereUniqueWithoutUserInput", "fields": [{ "name": "where", "inputType": [{ "type": "ResponseWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "update", "inputType": [{ "type": "ResponseUpdateWithoutUserDataInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "create", "inputType": [{ "type": "ResponseCreateWithoutUserInput", "kind": "object", "isRequired": true, "isList": false }] }] }, { "name": "ResponseUpdateManyWithoutUserInput", "fields": [{ "name": "create", "inputType": [{ "type": "ResponseCreateWithoutUserInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "connect", "inputType": [{ "type": "ResponseWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "set", "inputType": [{ "type": "ResponseWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "disconnect", "inputType": [{ "type": "ResponseWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "delete", "inputType": [{ "type": "ResponseWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "update", "inputType": [{ "type": "ResponseUpdateWithWhereUniqueWithoutUserInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "updateMany", "inputType": [{ "type": "ResponseUpdateManyWithWhereNestedInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "deleteMany", "inputType": [{ "type": "ResponseScalarWhereInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "upsert", "inputType": [{ "type": "ResponseUpsertWithWhereUniqueWithoutUserInput", "kind": "object", "isRequired": false, "isList": true }] }] }, { "name": "UserUpdateInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "email", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "updatedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "responses", "inputType": [{ "type": "ResponseUpdateManyWithoutUserInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "note", "inputType": [{ "type": "NoteUpdateOneWithoutUserInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "UserUpdateManyMutationInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "email", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "updatedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }] }, { "name": "NoteCreateInput", "fields": [{ "name": "text", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "user", "inputType": [{ "type": "UserCreateOneWithoutUserInput", "kind": "object", "isRequired": true, "isList": false }] }] }, { "name": "UserCreateWithoutNoteInput", "fields": [{ "name": "email", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "updatedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "responses", "inputType": [{ "type": "ResponseCreateManyWithoutResponsesInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "UserUpdateWithoutNoteDataInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "email", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "updatedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "responses", "inputType": [{ "type": "ResponseUpdateManyWithoutUserInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "UserUpsertWithoutNoteInput", "fields": [{ "name": "update", "inputType": [{ "type": "UserUpdateWithoutNoteDataInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "create", "inputType": [{ "type": "UserCreateWithoutNoteInput", "kind": "object", "isRequired": true, "isList": false }] }] }, { "name": "UserUpdateOneRequiredWithoutNoteInput", "fields": [{ "name": "create", "inputType": [{ "type": "UserCreateWithoutNoteInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "connect", "inputType": [{ "type": "UserWhereUniqueInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "update", "inputType": [{ "type": "UserUpdateWithoutNoteDataInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "upsert", "inputType": [{ "type": "UserUpsertWithoutNoteInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "NoteUpdateInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "text", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "user", "inputType": [{ "type": "UserUpdateOneRequiredWithoutNoteInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "NoteUpdateManyMutationInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "text", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }] }, { "name": "IntFilter", "fields": [{ "name": "equals", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "Int" }] }, { "name": "not", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "Int" }, { "isList": false, "isRequired": false, "kind": "scalar", "type": "IntFilter" }] }, { "name": "in", "inputType": [{ "isList": true, "isRequired": false, "kind": "scalar", "type": "Int" }] }, { "name": "notIn", "inputType": [{ "isList": true, "isRequired": false, "kind": "scalar", "type": "Int" }] }, { "name": "lt", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "Int" }] }, { "name": "lte", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "Int" }] }, { "name": "gt", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "Int" }] }, { "name": "gte", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "Int" }] }], "atLeastOne": false }, { "name": "StringFilter", "fields": [{ "name": "equals", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "String" }] }, { "name": "not", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "String" }, { "isList": false, "isRequired": false, "kind": "scalar", "type": "StringFilter" }] }, { "name": "in", "inputType": [{ "isList": true, "isRequired": false, "kind": "scalar", "type": "String" }] }, { "name": "notIn", "inputType": [{ "isList": true, "isRequired": false, "kind": "scalar", "type": "String" }] }, { "name": "lt", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "String" }] }, { "name": "lte", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "String" }] }, { "name": "gt", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "String" }] }, { "name": "gte", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "String" }] }, { "name": "contains", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "String" }] }, { "name": "startsWith", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "String" }] }, { "name": "endsWith", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "String" }] }], "atLeastOne": false }, { "name": "ResponseFilter", "fields": [{ "name": "every", "inputType": [{ "isList": false, "isRequired": false, "kind": "object", "type": "ResponseWhereInput" }] }, { "name": "some", "inputType": [{ "isList": false, "isRequired": false, "kind": "object", "type": "ResponseWhereInput" }] }, { "name": "none", "inputType": [{ "isList": false, "isRequired": false, "kind": "object", "type": "ResponseWhereInput" }] }], "atLeastOne": false }, { "name": "DateTimeFilter", "fields": [{ "name": "equals", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "DateTime" }] }, { "name": "not", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "DateTime" }, { "isList": false, "isRequired": false, "kind": "scalar", "type": "DateTimeFilter" }] }, { "name": "in", "inputType": [{ "isList": true, "isRequired": false, "kind": "scalar", "type": "DateTime" }] }, { "name": "notIn", "inputType": [{ "isList": true, "isRequired": false, "kind": "scalar", "type": "DateTime" }] }, { "name": "lt", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "DateTime" }] }, { "name": "lte", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "DateTime" }] }, { "name": "gt", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "DateTime" }] }, { "name": "gte", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "DateTime" }] }], "atLeastOne": false }, { "name": "AnswerFilter", "fields": [{ "name": "every", "inputType": [{ "isList": false, "isRequired": false, "kind": "object", "type": "AnswerWhereInput" }] }, { "name": "some", "inputType": [{ "isList": false, "isRequired": false, "kind": "object", "type": "AnswerWhereInput" }] }, { "name": "none", "inputType": [{ "isList": false, "isRequired": false, "kind": "object", "type": "AnswerWhereInput" }] }], "atLeastOne": false }, { "name": "QuestionFilter", "fields": [{ "name": "every", "inputType": [{ "isList": false, "isRequired": false, "kind": "object", "type": "QuestionWhereInput" }] }, { "name": "some", "inputType": [{ "isList": false, "isRequired": false, "kind": "object", "type": "QuestionWhereInput" }] }, { "name": "none", "inputType": [{ "isList": false, "isRequired": false, "kind": "object", "type": "QuestionWhereInput" }] }], "atLeastOne": false }, { "name": "FormOrderByInput", "atLeastOne": true, "atMostOne": true, "isOrderType": true, "fields": [{ "name": "id", "inputType": [{ "type": "OrderByArg", "isList": false, "isRequired": false, "kind": "enum" }], "isRelationFilter": false }, { "name": "uid", "inputType": [{ "type": "OrderByArg", "isList": false, "isRequired": false, "kind": "enum" }], "isRelationFilter": false }, { "name": "name", "inputType": [{ "type": "OrderByArg", "isList": false, "isRequired": false, "kind": "enum" }], "isRelationFilter": false }, { "name": "tag", "inputType": [{ "type": "OrderByArg", "isList": false, "isRequired": false, "kind": "enum" }], "isRelationFilter": false }] }, { "name": "QuestionOrderByInput", "atLeastOne": true, "atMostOne": true, "isOrderType": true, "fields": [{ "name": "id", "inputType": [{ "type": "OrderByArg", "isList": false, "isRequired": false, "kind": "enum" }], "isRelationFilter": false }, { "name": "uid", "inputType": [{ "type": "OrderByArg", "isList": false, "isRequired": false, "kind": "enum" }], "isRelationFilter": false }, { "name": "type", "inputType": [{ "type": "OrderByArg", "isList": false, "isRequired": false, "kind": "enum" }], "isRelationFilter": false }, { "name": "text", "inputType": [{ "type": "OrderByArg", "isList": false, "isRequired": false, "kind": "enum" }], "isRelationFilter": false }, { "name": "createdAt", "inputType": [{ "type": "OrderByArg", "isList": false, "isRequired": false, "kind": "enum" }], "isRelationFilter": false }, { "name": "updatedAt", "inputType": [{ "type": "OrderByArg", "isList": false, "isRequired": false, "kind": "enum" }], "isRelationFilter": false }] }, { "name": "AnswerOrderByInput", "atLeastOne": true, "atMostOne": true, "isOrderType": true, "fields": [{ "name": "id", "inputType": [{ "type": "OrderByArg", "isList": false, "isRequired": false, "kind": "enum" }], "isRelationFilter": false }, { "name": "text", "inputType": [{ "type": "OrderByArg", "isList": false, "isRequired": false, "kind": "enum" }], "isRelationFilter": false }, { "name": "createdAt", "inputType": [{ "type": "OrderByArg", "isList": false, "isRequired": false, "kind": "enum" }], "isRelationFilter": false }, { "name": "updatedAt", "inputType": [{ "type": "OrderByArg", "isList": false, "isRequired": false, "kind": "enum" }], "isRelationFilter": false }] }, { "name": "ResponseOrderByInput", "atLeastOne": true, "atMostOne": true, "isOrderType": true, "fields": [{ "name": "id", "inputType": [{ "type": "OrderByArg", "isList": false, "isRequired": false, "kind": "enum" }], "isRelationFilter": false }, { "name": "uid", "inputType": [{ "type": "OrderByArg", "isList": false, "isRequired": false, "kind": "enum" }], "isRelationFilter": false }, { "name": "submittedAt", "inputType": [{ "type": "OrderByArg", "isList": false, "isRequired": false, "kind": "enum" }], "isRelationFilter": false }, { "name": "createdAt", "inputType": [{ "type": "OrderByArg", "isList": false, "isRequired": false, "kind": "enum" }], "isRelationFilter": false }, { "name": "updatedAt", "inputType": [{ "type": "OrderByArg", "isList": false, "isRequired": false, "kind": "enum" }], "isRelationFilter": false }] }, { "name": "UserOrderByInput", "atLeastOne": true, "atMostOne": true, "isOrderType": true, "fields": [{ "name": "id", "inputType": [{ "type": "OrderByArg", "isList": false, "isRequired": false, "kind": "enum" }], "isRelationFilter": false }, { "name": "email", "inputType": [{ "type": "OrderByArg", "isList": false, "isRequired": false, "kind": "enum" }], "isRelationFilter": false }, { "name": "createdAt", "inputType": [{ "type": "OrderByArg", "isList": false, "isRequired": false, "kind": "enum" }], "isRelationFilter": false }, { "name": "updatedAt", "inputType": [{ "type": "OrderByArg", "isList": false, "isRequired": false, "kind": "enum" }], "isRelationFilter": false }] }, { "name": "NoteOrderByInput", "atLeastOne": true, "atMostOne": true, "isOrderType": true, "fields": [{ "name": "id", "inputType": [{ "type": "OrderByArg", "isList": false, "isRequired": false, "kind": "enum" }], "isRelationFilter": false }, { "name": "text", "inputType": [{ "type": "OrderByArg", "isList": false, "isRequired": false, "kind": "enum" }], "isRelationFilter": false }] }] } };

module.exports = Photon; // needed to support const Photon = require('...') in js
Object.defineProperty(module.exports, "__esModule", { value: true });
for (let key in exports) {
  if (exports.hasOwnProperty(key)) {
    module.exports[key] = exports[key];
  }
}